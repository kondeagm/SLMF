<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
	routePrefix = ControllerRootName;
}
else
{
	routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="DBModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;
using PagedList;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
	var contextTypeName = ContextTypeName;
	var entitySetName = ModelMetadata.EntitySetName;
	var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
	entitySetVar = "rows" + (entitySetName.Substring(0, length:1).ToUpper() + entitySetName.Substring(1));
	var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
	var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
	var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
	var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
	var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
	var lambdaVar = ModelVariable[0];
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	var DBModelVariable = "bd" + (entitySetName.Substring(0, length:1).ToUpper() + entitySetName.Substring(1));

	string bindAttribute;
	if (IsOverpostingProtectionRequired)
	{
		bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
	}
	else
	{
		bindAttribute = String.Empty;
	}
#>
	[Authorize]
	public class <#= ControllerName #> : Controller
	{
		private <#= ContextTypeName #> db = new <#= ContextTypeName #>();
		private int pageSize = 8;

		// GET: <#= routePrefix #>
<# if (UseAsync) { #>
		public async Task<ActionResult> Index()
<# } else { #>
		public ActionResult Index(string sSortOrder, string sCurrentFilter, string sSearchString, int? pagina)
<# } #>
		{
			ViewBag.CurrentSort = sSortOrder;
			ViewBag.IdSortParm = String.IsNullOrEmpty(sSortOrder) ? "Nombre_desc" : "";
			if (sSearchString != null)
			{
				pagina = 1;
			}
			else
			{
				sSearchString = sCurrentFilter;
			}
			ViewBag.CurrentFilter = sSearchString;
<#  var includeExpressions = "";
		includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
			var <#= entitySetVar #> = from dbr in db.<#= entitySetName #><#= includeExpressions #>
								select dbr;
<# } else { #>
			var <#= entitySetVar #> = from dbr in db.<#= entitySetName #>
								select dbr;
<# } #>
			if (!String.IsNullOrEmpty(sSearchString))
			{
				<#= entitySetVar #> = <#= entitySetVar #>.Where(s => s.ID == 0);
			}
			// s => s.Nombre.ToUpper().Contains(sSearchString.ToUpper())
			switch (sSortOrder)
			{
				case "Nombre_desc":
					<#= entitySetVar #> = <#= entitySetVar #>.OrderByDescending(s => s.ID);
					break;
				default:
					<#= entitySetVar #> = <#= entitySetVar #>.OrderBy(s => s.ID);
					break;
			}
			int pageNumber = (pagina ?? 1);
			ViewBag.Pagina = pageNumber;
			return View(<#= entitySetVar #>.ToPagedList(pageNumber, pageSize));
		}

		// GET: <#= routePrefix #>/Details/5
<# if (UseAsync) { #>
		public async Task<ActionResult> Details(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
		public ActionResult Details(<#= primaryKeyNullableTypeName #> id, int? pagina)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
<# if (UseAsync) { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= DBModelVariable #> == null)
			{
				return HttpNotFound();
			}
			return View(<#= DBModelVariable #>);
		}

		// GET: <#= routePrefix #>/Create
		public ActionResult Create(int? pagina)
		{
			ViewBag.Pagina = (pagina ?? 1);
			<#= ModelTypeName #> <#= DBModelVariable #> = new <#= ModelTypeName #>();
<# foreach (var property in relatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.OrderBy(s => s.<#= property.DisplayPropertyName #>), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
			return View(<#= DBModelVariable #>);
		}

		// POST: <#= routePrefix #>/Create
		[HttpPost]
		[ValidateAntiForgeryToken]
<# if (UseAsync) { #>
		public async Task<ActionResult> Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
		public ActionResult Create(int? pagina, <#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
			if (ModelState.IsValid)
			{
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
				<#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
				if (db.<#= entitySetName #>.Any(x => x.ID == <#= ModelVariable #>.ID))
				{
					ModelState.AddModelError("<#= entitySetName #>", "Ya existe");
				}
				else
				{
					db.<#= entitySetName #>.Add(<#= ModelVariable #>);
	<# if (UseAsync) {#>
					await db.SaveChangesAsync();
	<# } else { #>
					db.SaveChanges();
	<# } #>
					return RedirectToAction("Index", "<#= entitySetName #>", new { sSearchString = <#= ModelVariable #>.ID });
				}
			}

<# foreach (var property in relatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.OrderBy(s => s.<#= property.DisplayPropertyName #>), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
			return View(<#= ModelVariable #>);
		}

		// GET: <#= routePrefix #>/Edit/5
<# if (UseAsync) { #>
		public async Task<ActionResult> Edit(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
		public ActionResult Edit(<#= primaryKeyNullableTypeName #> id, int? pagina)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}

<# if (UseAsync) { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= DBModelVariable #> == null)
			{
				return HttpNotFound();
			}
<# foreach (var property in relatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.OrderBy(s => s.<#= property.DisplayPropertyName #>), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= DBModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
			return View(<#= DBModelVariable #>);
		}

		// POST: <#= routePrefix #>/Edit/5
		[HttpPost]
		[ValidateAntiForgeryToken]
<# if (UseAsync) { #>
		public async Task<ActionResult> Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
		public ActionResult Edit(int? pagina, <#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
			if (ModelState.IsValid)
			{
				if (db.<#= entitySetName #>.Any(x => x.ID == <#= ModelVariable #>.ID  && x.ID != <#= ModelVariable #>.ID))
				{
					ModelState.AddModelError("<#= entitySetName #>", "Ya existe");
				}
				else
				{
					db.Entry(<#= ModelVariable #>).State = EntityState.Modified;
	<# if (UseAsync) {#>
					await db.SaveChangesAsync();
	<# } else { #>
					db.SaveChanges();
	<# } #>
					return RedirectToAction("Index", "<#= entitySetName #>", new { sSearchString = <#= ModelVariable #>.ID });
				}
			}
<# foreach (var property in relatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.OrderBy(s => s.<#= property.DisplayPropertyName #>), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
			return View(<#= ModelVariable #>);
		}

		// GET: <#= routePrefix #>/Delete/5
<# if (UseAsync) { #>
		public async Task<ActionResult> Delete(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
		public ActionResult Delete(<#= primaryKeyNullableTypeName #> id, int? pagina)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
<# if (UseAsync) { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= DBModelVariable #> == null)
			{
				return HttpNotFound();
			}
			return View(<#= DBModelVariable #>);
		}

		// POST: <#= routePrefix #>/Delete/5
		[HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
<# if (UseAsync) { #>
		public async Task<ActionResult> DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
<# } else { #>
		public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id, int? pagina)
<# } #>
		{
			ViewBag.Pagina = (pagina ?? 1);
<# if (UseAsync) { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
			<#= ModelTypeName #> <#= DBModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
			//if (<#= DBModelVariable #>.Count == 0)
			//{
				db.<#= entitySetName #>.Remove(<#= DBModelVariable #>);
	<# if (UseAsync) { #>
				await db.SaveChangesAsync();
	<# } else { #>
				db.SaveChanges();
			//}
	<# } #>
				return RedirectToAction("Index", "<#= entitySetName #>", new { pagina = ViewBag.Pagina });
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				db.Dispose();
			}
			base.Dispose(disposing);
		}
	}
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
	string GetNullableTypeName(string typeName, string shortTypeName)
	{
		// The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
		// In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
		Type primaryKeyType = null;
		try
		{
			primaryKeyType = Type.GetType(typeName);
		}
		catch
		{
		}
		if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
		{
			return shortTypeName + "?";
		}
		return shortTypeName;
	}

	bool IsGuid(string typeName) {
		return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
	}
#>