Navigation = function(data) {
    this.settings = {
        btActiveSectionLeft: $About.find(".left-slide .active-left-block"),
        leftBlock: $About.find(".left-slide .active-section-block"),

        rightBlock: $About.find(".right-slide .active-section-block"),
        btActiveSectionRight: $About.find(".right-slide .active-right-block"),
    };
};

Navigation.prototype.init = function(data) {

    this.bind();
};

Navigation.prototype.bind = function() {

    var self = this;

    self.settings.btActiveSectionLeft.on('click', function(event) {
        event.preventDefault();

        if (!$(this).hasClass('null')) {

            self.animations({
                el: $(this),
                action: "left-show-block",
            });
            self.animations({
                el: $(this),
                action: "bt-left-list-active",
            });
        }
    });

    self.settings.btActiveSectionRight.on('click', function(event) {
        event.preventDefault();

        if (!$(this).hasClass('null')) {

            self.animations({
                el: $(this),
                action: "right-show-block",
            });
            self.animations({
                el: $(this),
                action: "bt-right-list-active",
            });
        }
    });
};

Navigation.prototype.animations = function(params) {

    var self = this;
    switch (params.action) {

        case "bt-left-list-active":

            TweenLite.to(self.settings.btActiveSectionLeft, 0.15, {
                color: "#b0b0b0",
                right: 0,
                ease: Cubic.easeOut
            });
            TweenLite.to(self.settings.btActiveSectionLeft.parent().find("span"), 0.1, {
                autoAlpha: 0
            });

            TweenLite.to(params.el, 0.15, {
                color: "#f7d72b",
                right: -12,
                ease: Cubic.easeOut
            });
            TweenLite.fromTo(params.el.parent().find("span"), 0.15, {
                autoAlpha: 0,
                right: -35
            }, {
                right: -27,
                autoAlpha: 1,
                ease: Cubic.easeOut
            });
            break;
        case "bt-right-list-active":

            TweenLite.to(self.settings.btActiveSectionRight, 0.15, {
                color: "#b0b0b0",
                left: 0,
                ease: Cubic.easeOut
            });
            TweenLite.to(self.settings.btActiveSectionRight.parent().find("span"), 0.1, {
                autoAlpha: 0
            });

            TweenLite.to(params.el, 0.15, {
                color: "#f7d72b",
                left: -12,
                ease: Cubic.easeOut
            });
            TweenLite.fromTo(params.el.parent().find("span"), 0.15, {
                autoAlpha: 0,
                left: -35
            }, {
                left: -27,
                autoAlpha: 1,
                ease: Cubic.easeOut
            });
            break;
        case "left-hidde-block":

            self.settings.leftBlock.css('display', 'none');
            TweenLite.to([self.settings.leftBlock, self.settings.leftBlock.find(".step-show"), self.settings.leftBlock.find(".step-big")], 0.15, {
                autoAlpha: 0
            });
            break;
        case "left-show-history-1":

            var block1 = self.settings.leftBlock.eq(1).find(".part-1");
            var block2 = self.settings.leftBlock.eq(1).find(".part-2");

            block2.css('display', 'none');
            TweenLite.to([block2, block2.find(".step-show")], 0.15, {
                autoAlpha: 0
            });


            block1.css('display', 'block');
            TweenLite.to(block1, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "left-block-1",
                        block: self.settings.leftBlock.eq(1),
                    })
                }
            });
            break;
        case "left-show-history-2":

            var block1 = self.settings.leftBlock.eq(1).find(".part-1");
            var block2 = self.settings.leftBlock.eq(1).find(".part-2");

            block1.css('display', 'none');
            TweenLite.to([block1, block1.find(".step-show")], 0.15, {
                autoAlpha: 0
            });

            block2.css('display', 'block');
            TweenLite.to(block2, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "left-block-1.1",
                        block: block2,
                    })
                }
            });
            break;
        case "left-show-block":

            self.animations({
                action: "left-hidde-block"
            });

            var number = params.el.data("block") || 0;
            var block = self.settings.leftBlock.eq(number);

            block.css('display', 'block');
            TweenLite.to(block, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "left-block-" + number,
                        block: block,
                    })
                }
            });
            break;
        case "left-block-0":
            var duration = 0.15;
            var delay = 0;
            var elements = params.block.find(".step-show");

            TweenLite.set(params.block.find(".step-big"), {
                scale: 1.3,
                delay: 0.2,
                autoAlpha: 1,
            });
            TweenLite.to(params.block.find(".step-big"), 0.15, {
                scale: 1,
                delay: 0.2,
                ease: Linear.easeNone
            });

            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
        case "left-block-1":

            var block1 = self.settings.leftBlock.eq(1).find(".part-1");
            var block2 = self.settings.leftBlock.eq(1).find(".part-2");

            block2.css('display', 'none');
            TweenLite.to([block2, block2.find(".step-show")], 0.15, {
                autoAlpha: 0,
                onComplete: function(){
                    $("#historia-up span").removeAttr("style");
                    $("#historia-down span").removeAttr("style");
                },
            });
            
            $("#historia-down").removeClass('null');
            $("#historia-up").addClass('null');

            block1.css('display', 'block');
            TweenLite.to(block1, 0, {
                autoAlpha: 1,
                onComplete: function() {

                    var duration = 0.15;
                    var delay = 0;
                    var elements = block1.find(".step-show");
                   
                    for (var i = 0; i < elements.length; i++) {
                        TweenLite.fromTo(elements[i], 0.15, {
                            autoAlpha: 0,
                            y: 25
                        }, {
                            autoAlpha: 1,
                            y: 0,
                            delay: delay,
                            ease: Cubic.easeOut
                        });
                        delay = delay + 0.1;
                    };
                }
            });


            break;
        case "left-block-1.1":
            var duration = 0.15;
            var delay = 0;
            var elements = params.block.find(".step-show");

            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
        case "left-block-2":

            var duration = 0.15;
            var delay = 0.1;
            var elements = params.block.find(".step-show");

            TweenLite.fromTo(params.block.find(".step-big"), 0.15, {
                scale: 1.3,
                autoAlpha: 1
            }, {
                scale: 1,
                ease: Linear.easeNone
            });
            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
        case "left-block-3":
            var duration = 0.15;
            var delay = 0;
             
            var elements = params.block.find(".step-show");
            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;


        case "right-hidde-block":

            self.settings.rightBlock.css('display', 'none');
            TweenLite.to([self.settings.rightBlock, self.settings.rightBlock.find(".step-show")], 0.15, {
                autoAlpha: 0
            });
            break;
        case "right-show-block":

            self.animations({
                action: "right-hidde-block"
            });

            var number = params.el.data("block") || 0;
            var block = self.settings.rightBlock.eq(number);

            block.css('display', 'block');
            TweenLite.to(block, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "right-block-" + number,
                        block: block,
                    })
                }
            });
            break;
        case "right-show-bio-1":

            var block1 = self.settings.rightBlock.eq(0).find(".bio-section-p1");
            var block2 = self.settings.rightBlock.eq(0).find(".bio-section-p2");

            block2.css('display', 'none');
            TweenLite.to([block2, block2.find(".step-show")], 0.15, {
                autoAlpha: 0
            });

            block1.css('display', 'block');
            TweenLite.to(block1, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "right-block-0",
                        block: self.settings.rightBlock.eq(0),
                    })
                }
            });
            break;
        case "right-show-bio-2":

            var block1 = self.settings.rightBlock.eq(0).find(".bio-section-p1");
            var block2 = self.settings.rightBlock.eq(0).find(".bio-section-p2");

            block1.css('display', 'none');
            TweenLite.to([block1, block1.find(".step-show")], 0.15, {
                autoAlpha: 0
            });

            block2.css('display', 'block');
            TweenLite.to(block2, 0.15, {
                autoAlpha: 1,
                onComplete: function() {
                    self.animations({
                        action: "right-block-0.1",
                        block: block2,
                    })
                }
            });
            break;
        case "right-block-0":
            var block1 = self.settings.rightBlock.eq(0).find(".bio-section-p1");
            var block2 = self.settings.rightBlock.eq(0).find(".bio-section-p2");

            block2.css('display', 'none');
            TweenLite.to([block2, block2.find(".step-show")], 0.15, {
                autoAlpha: 0
            });
            $("#bio-down").removeClass('null');
            $("#bio-up").addClass('null');

            block1.css('display', 'block');
            TweenLite.to(block1, 0, {
                autoAlpha: 1,
                onComplete: function() {

                    var duration = 0.15;
                    var delay = 0;
                    var elements = block1.find(".step-show");

                    for (var i = 0; i < elements.length; i++) {

                        TweenLite.fromTo(elements[i], 0.15, {
                            autoAlpha: 0,
                            y: 25
                        }, {
                            autoAlpha: 1,
                            y: 0,
                            delay: delay,
                            ease: Cubic.easeOut
                        });
                        delay = delay + 0.1;
                    };
                    TweenLite.set(params.block.find(".step-big"), {
                        scale: 1.2,
                        delay: 0.2,
                        autoAlpha: 1,
                    });
                    TweenLite.to(params.block.find(".step-big"), 0.15, {
                        scale: 1,
                        delay: 0.2,
                        ease: Linear.easeNone
                    });
                }
            });
            break;
        case "right-block-0.1":
            var duration = 0.15;
            var delay = 0;
            var elements = params.block.find(".step-show");
            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
        case "right-block-1":
            var duration = 0.15;
            var delay = 0;
            var elements = params.block.find(".step-show");
            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
        case "right-block-2":
            var duration = 0.15;
            var delay = 0;
            var elements = params.block.find(".step-show");
            for (var i = 0; i < elements.length; i++) {

                TweenLite.fromTo(elements[i], 0.15, {
                    autoAlpha: 0,
                    y: 25
                }, {
                    autoAlpha: 1,
                    y: 0,
                    delay: delay,
                    ease: Cubic.easeOut
                });
                delay = delay + 0.1;
            };
            break;
    };
};

Slide = function() {
    this.settings = {
        wnd: $(window),
        slide: $About.find(".slide"),
        navLeft: $About.find(".left-slide .slide-content .navigator span"),
        navRight: $About.find(".right-slide .slide-content .navigator span"),
        centerLogo: $About.find(".center-logo img"),
        flechaLeft: $About.find(".left-slide .wrapper-franja .franja-derecha"),
        flechaRight: $About.find(".right-slide .wrapper-franja .franja-izquierda"),
        linkBackLeft: $About.find(".left-slide .slide-content a.back-button"),
        linkBackRight: $About.find(".right-slide .slide-content a.back-button"),
        activeSectionRight: $About.find("#active-section-right"),
        activeSectionLeft: $About.find("#active-section-left"),

        btLeft: $About.find("#center-go-left .navigator"),
        btRight: $About.find("#center-go-right .navigator"),

        diagonalLeftImage: $About.find(".left-slide .diagonals-left .image"),
        diagonalLeftImageBg: $About.find(".left-slide .diagonals-left .background"),
        diagonalLeftImageYellow: $About.find(".left-slide .diagonals-left .yellow-back"),

        diagonalRightImage: $About.find(".right-slide .diagonals-right .image"),
        diagonalRightImageBg: $About.find(".right-slide .diagonals-right .background"),
        diagonalRightImageYellow: $About.find(".right-slide .diagonals-right .yellow-back"),

        backArrows: $About.find(".bt-scroll-next-slide"),

        btHistoryUp: $About.find("#historia-up"),
        btHistoryDown: $About.find("#historia-down"),

        btBioUp: $About.find("#bio-up"),
        btBioDown: $About.find("#bio-down"),
    }
    this.init();
};

Slide.prototype.init = function() {

    this.bind({
        action: "hoverBtLeft" 
    });
    this.bind({
        action: "hoverBtRight" 
    });
    this.bind({
        action: "scroll",
        up: this.settings.btHistoryUp,
        down: this.settings.btHistoryDown 
    });
    this.bind({
        action: "scroll",
        up: this.settings.btBioUp,
        down: this.settings.btBioDown 
    });
};

Slide.prototype.bind = function(params) {

    var self = this;
    var s = self.settings;

    switch (params.action) {
        case "hoverBtLeft":
            s.btLeft.hover(function() {

                self.animate({
                    key: "hoverBtArrow",
                    el: $(this).find(".arrow-left"),
                    x: 0
                });
            }, function() {

                self.animate({
                    key: "hoverBtArrow",
                    el: $(this).find(".arrow-left"),
                    x: 20
                });
            });
            break;

        case "hoverBtRight":
            s.btRight.hover(function() {

                self.animate({
                    key: "hoverBtArrow",
                    el: $(this).find(".arrow-right"),
                    x: 0
                });
            }, function() {
                self.animate({
                    key: "hoverBtArrow",
                    el: $(this).find(".arrow-right"),
                    x: -20
                });
            });
            break;

        case "scroll":
            params.down
                .hover(function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 0
                    })
                }, function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: -10
                    })
                });

            params.up
                .hover(function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 0
                    })
                }, function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 10
                    })
                });
            break;
    };
};

Slide.prototype.snap = function(side) {
    var duration = 0.55,
        s = this.settings;
    if (side == 'left') {
        TweenMax.to("#section-about", duration, {
            scrollTo: {
                x: 0
            },
            ease: Cubic.easeOut,
            onComplete: function(){
                // console.log("done snap", side);
                // console.log(s.wnd.width());
            }
        });


    } else if (side == 'right') {
        TweenMax.to("#section-about", duration, {
            scrollTo: {
                x: $(window).width()
            },
            ease: Cubic.easeOut,
            onComplete: function(){
                // console.log("done snap", side)
                // console.log(s.wnd.width());
            }
        });

    }
}

Slide.prototype.repositionBackground = function(side) {
    var percent = 57;
    var time = .55;
    var delay = 0.2;
    // console.log(percent);
    var w = $(window).width();
    if (side == 'left') {
        percent = 57;
    } else if (side == 'right') {
        percent = 43;
        time = .48;
    };
    TweenMax.to(this.settings.slide, time, {
        delay: delay,
        backgroundPositionX: percent + "%",
        ease: Cubic.easeOut
    });
}

Slide.prototype.animate = function(params) {
    var self = this,
        s = self.settings,
        key = params.key;

    params.onComplete = params.onComplete || function(){};

    switch (key) {
        case "hoverBtArrow":
            //Firefox Workaround
            var bgPosY = params.el.css('background-position').split(" ")[1];
            TweenLite.to(params.el, 0.15, {
                backgroundPosition: params.x + 'px ' + bgPosY,
                ease: Cubic.easeOut
            });
            break;
        case "slideLeft":
            // Fondo
            this.repositionBackground('left');

            TweenMax.to(s.navLeft, 0.5, {
                marginRight: "6%",
                ease: Cubic.easeOut
            });

            // Logo
            TweenMax.to(s.centerLogo, 0.5, {
                x: 150,
                ease: Cubic.easeOut
            });

            TweenMax.to(s.flechaLeft, .85, {
                left: "95px",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.linkBackLeft, 0.5, {
                opacity: 1,
                ease: Linear.easeNone
            });

            var showBackArrows = function() {

                this.duration = 0.15;
                TweenLite.to(s.backArrows, this.duration, {
                    autoAlpha: 1,
                    delay: 0.25,
                    ease: Cubic.easeOut,
                });
                TweenLite.to($("#left-back-link span.arrow-content"), 0.15, {
                    x: -18,
                    ease: Cubic.easeOut
                });
            };

            var hiddeArrows = function() {

                TweenLite.to([s.btLeft.find(".arrow-left"), s.btRight.find(".arrow-right")], 0.15, {
                    autoAlpha: 0,
                    ease: Linear.easeNone
                })
            };

            // Listas
            var list = function() {
                this.duration = 0.25,
                TweenMax.to(s.activeSectionLeft, this.duration, {
                    opacity: 1,
                    delay: 0.25,
                    ease: Linear.easeNone,
                });
            }

            // Diagonal Left
            var diagonalLeft = function() {
                this.duration = .80;
                TweenLite.to(s.diagonalLeftImage, this.duration, {
                    left: -85,
                    ease: Cubic.easeOut
                });

                TweenLite.to(s.diagonalLeftImageYellow, this.duration, {
                    left: -220,
                    ease: Cubic.easeOut
                });
            };

            showBackArrows();
            hiddeArrows();
            list();
            this.snap('left');
            diagonalLeft();

            break;
        case "slideRight":
            this.repositionBackground('right');

            TweenMax.to(s.navRight, 0.5, {
                marginLeft: "6%",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.centerLogo, 0.5, {
                x: -150,
                ease: Cubic.easeOut
            });

            TweenMax.to(s.flechaRight, 0.85, {
                left: "-160px",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.linkBackRight, 0.5, {
                opacity: 1,
                ease: Linear.easeNone
            });


            var showBackArrows = function() {

                this.duration = 0.15;
                TweenLite.to(s.backArrows, this.duration, {
                    autoAlpha: 1,
                    delay: 0.25,
                    ease: Cubic.easeOut,
                });
                TweenLite.to($("#right-back-link span.arrow-content"), 0.15, {
                    x: 18,
                    ease: Cubic.easeOut
                });
            };

            var hiddeArrows = function() {

                TweenLite.to([s.btLeft.find(".arrow-left"), s.btRight.find(".arrow-right")], 0.15, {
                    autoAlpha: 0,
                    ease: Linear.easeNone
                })
            };

            // Listas
            var list = function() {
                this.duration = 0.25,
                TweenMax.to(s.activeSectionRight, this.duration, {
                    opacity: 1,
                    delay: 0.25,
                    ease: Linear.easeNone,
                });
            }

            // Diagonal Right
            var diagonalRight = function() {
                this.duration = .75;
                TweenLite.to(s.diagonalRightImage, this.duration, {
                    right: -85,
                    ease: Cubic.easeOut
                });

                TweenLite.to(s.diagonalRightImageYellow, this.duration, {
                    right: -220,
                    ease: Cubic.easeOut
                });
            };

            showBackArrows();
            hiddeArrows();
            list();
            this.snap('right');
            diagonalRight();
            break;
        case "slideCenter":

            TweenMax.to(s.slide, 0.75, {
                backgroundPositionX: "50%",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.navLeft, 0.5, {
                marginRight: "31%",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.navRight, 0.5, {
                marginLeft: "31%",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.centerLogo, 0.2, {
                x: 0,
                ease: Cubic.easeOut
            });
            TweenMax.to(s.flechaLeft, 0.5, {
                left: "0px",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.flechaRight, 0.5, {
                left: "0px",
                ease: Cubic.easeOut
            });
            TweenMax.to(s.linkBackLeft, 0.5, {
                opacity: 0,
                ease: Linear.easeNone
            });
            TweenMax.to(s.linkBackRight, 0.5, {
                opacity: 0,
                ease: Linear.easeNone
            });

            var hiddeBackArrows = function() {

                this.duration = 0.15;
                TweenLite.to(s.backArrows, this.duration, {
                    autoAlpha: 0
                })
            };

            var showArrows = function() {

                this.duration = 0.15;
                TweenLite.to([s.btLeft.find(".arrow-left"), s.btRight.find(".arrow-right")], this.duration, {

                    autoAlpha: 1,
                    ease: Linear.easeNone
                });
            };

            var list = function() {

                this.duration = 0.15,
                // Right
                TweenMax.to(s.activeSectionRight, this.duration, {
                    opacity: 0,
                    ease: Linear.easeNone,
                });

                // Left
                TweenMax.to(s.activeSectionLeft, this.duration, {
                    opacity: 0,
                    ease: Linear.easeNone,
                });
            };

            var slide = function() {
                this.duration = 0.5;

                TweenMax.to("#section-about", this.duration, {
                    scrollTo: {
                        x: (s.wnd.width() - 95) / 2,

                    },
                    ease: Cubic.easeOut,
                    onComplete: function(){
                        // console.log("snap center")
                        // console.log(s.wnd.width())
                        params.onComplete();
                    }
                });
            };


            // Diagonal Left
            var diagonalLeft = function() {

                this.duration = 0.5;
                TweenLite.to(s.diagonalLeftImage, this.duration, {
                    left: -400,
                    ease: Cubic.easeOut
                });

                TweenLite.to(s.diagonalLeftImageYellow, this.duration, {
                    left: -265,
                    ease: Cubic.easeOut
                });
            };
            var diagonalRight = function() {

                this.duration = 0.5;
                TweenLite.to(s.diagonalRightImage, this.duration, {
                    right: -400,
                    ease: Cubic.easeOut
                });

                TweenLite.to(s.diagonalRightImageYellow, this.duration, {
                    right: -265,
                    ease: Cubic.easeOut
                });
            };
            hiddeBackArrows();
            showArrows();
            list();
            slide();
            diagonalLeft();
            diagonalRight();
            break;
    };
};

Intro = function(data) {

    this.settings = {

        bg: $About.find("#slide,.background-tiling"),
        logo: $About.find("#center-logo img"),

        leftArrow: $About.find("#left-arrow"),
        rightArrow: $About.find("#right-arrow"),

        leftH2: $About.find("#center-go-left .nav-title"),
        rightH2: $About.find("#center-go-right .nav-title"),

        leftH1: $About.find("#center-go-left .nav-sub-title"),
        rightH1: $About.find("#center-go-right .nav-sub-title"),

        leftArrowSmall: $About.find("#center-go-left .arrow-left"),
        rightArrowSmall: $About.find("#center-go-right .arrow-right"),
    };
    this.onComplete = data.onComplete || {};
};

Intro.prototype.init = function(data) {

    this.onComplete = this.onComplete || data.onComplete || {};
    this.animate();
};

Intro.prototype.animate = function() {

    var self = this;

    var titles = function() {
        self.onComplete();

        this.duration = .55;
        this.delay1 = 0.5;
        this.delay2 = 0.4;
        this.delay3 = 0.75;

        // Secundario
        TweenLite.fromTo(self.settings.leftH2, this.duration, {
            x: -$Window.width() - 300,
            autoAlpha: 1,
        }, {
            x: 0,
            delay: this.delay2,
            ease: Cubic.easeOut,
        });
        TweenLite.fromTo(self.settings.rightH2, this.duration, {
            x: $Window.width() + 300,
            autoAlpha: 1,
        }, {
            x: 0,
            delay: this.delay2,
            ease: Cubic.easeOut,
        });




        // Principal
        TweenLite.fromTo(self.settings.leftH1, this.duration, {
            x: -$Window.width() - 300,
            autoAlpha: 1,
        }, {
            x: 0,
            delay: this.delay1,
            ease: Cubic.easeOut,
        });
        TweenLite.fromTo(self.settings.rightH1, this.duration, {
            x: $Window.width() + 300,
            autoAlpha: 1,
        }, {
            x: 0,
            delay: this.delay1,
            ease: Cubic.easeOut,
        });




        //Flechas
        TweenLite.set(self.settings.leftArrowSmall, {
            x: 50,
            autoAlpha: 1,
            top: 0,
            delay: this.delay3,
        });
        TweenLite.to(self.settings.leftArrowSmall, this.duration, {
            x: 0,
            delay: this.delay3,
            ease: Cubic.easeOut,
        });


        TweenLite.set(self.settings.rightArrowSmall, {
            x: -50,
            top: 0,
            delay: this.delay3,
        });
        TweenLite.to(self.settings.rightArrowSmall, this.duration, {
            x: 0,
            delay: this.delay3,
            ease: Cubic.easeOut,
        });
    };

    var arrows = function() {

        this.duration = .55;
        TweenLite.fromTo(self.settings.leftArrow, this.duration, {
            left: "-100%"
        }, {
            left: 0,
            ease: Cubic.easeOut,
        });

        TweenLite.fromTo(self.settings.rightArrow, this.duration, {
            left: "100%"
        }, {
            left: 0,
            ease: Cubic.easeOut,
        });
    };

    var logo = function() {

        this.duration = .35;

        TweenLite.fromTo(self.settings.logo, this.duration, {
            autoAlpha: 1,
        }, {
            scale: 1,
            ease: Cubic.easeOut,
        });
    };

    var bg = function() {

        this.duration = .75;
        TweenLite.fromTo(self.settings.bg, this.duration, {
            autoAlpha: 0
        }, {
            autoAlpha: 1,
            ease: Linear.easeNone,
            onComplete: function() {
                logo();
                arrows();
                titles();
            }
        });
    };

    bg();
};

// @codekit-prepend "navigation.js"
// @codekit-prepend "slide.js"
// @codekit-prepend "intro.js"
//  
About = {
    init: function(data) {
        this.cachedElements();


        slide = new Slide();
        intro = new Intro({
            onComplete: bindAll
        });
        navigation = new Navigation();
        slide.init();

        function toggleCenterNavigation() {
            $About.find(".right-back, .left-back").toggle();
        };

        function handleCustomResize() {
            $(window).trigger("resize.bindToWindowSize");
        };
        // INIT SLIDE
        var currentSlide = "";
        var currentBioPage = 1;
        // var currentHistoryPage = 1;
        var currentSectionPage = "";

        function slideTo(direction, reset, callback) {
            if (direction == currentSlide && !reset) {

                return false;
            }

            function resetNavArrows() {
                $About.find("a.up").addClass("null");
                $About.find("a.down").removeClass("null");
            }
            //toggleCenterNavigation();
            switch (direction) {
                case 'left':
                    if (currentSlide != 'left') {
                        resetNavArrows();
                        slide.animate({
                            key: "slideLeft",
                            callback: callback
                        });
                        $(".active-left-block.active").trigger("click");
                    } else {
                        slide.snap('left');
                        slide.repositionBackground('left');
                    }
                    break;
                case 'right':
                    if (currentSlide != 'right') {
                        resetNavArrows();
                        slide.animate({
                            key: "slideRight",
                            callback: callback
                        });
                        $(".active-right-block.active").trigger("click");
                    } else {
                        slide.snap('right');
                        slide.repositionBackground('right');
                    }
                    break;
                default:
                    //var backgroundOffset = 
                    if (reset == true) {
                        TweenMax.to("#section-about", this.duration, {
                            scrollTo: {
                                x: ($(window).width() - 95) / 2,

                            },
                        });
                        // $(document).scrollLeft(($(window).width() - 95) / 2);

                    } else {
                        slide.animate({
                            key: "slideCenter",
                            onComplete: callback
                        });
                    }
                    //
                    //$About.find(".slide").css("left", "-50%");
                    //$About.find(".center-image").css("background-position", "");
            }
            currentSlide = direction;
            // console.log(currentSlide);
        }

        function addButtonTriggers() {
            //Left Navigation Menu
            $About.find("#link-mision, #link-historia, #link-manifiesto, #link-pilares").click(onLeftNavigationClick);
            $About.find(".left-slide a.down, .left-slide a.up").click(onLeftVerticalNavClick);
            //Right Navigation Menu
            $About.find("#link-bio, #link-filosofia, #link-logros").click(onRightNavigationClick);
            $About.find(".right-slide a.down, .right-slide a.up ").click(onRightVerticalNavClick);
            //Side controls
            $About.find("#left-back-link, #right-back-link").click(function(e) {
                e.preventDefault();
                slideTo('center');
            });
            //Center controls
            $About.find("#center-go-right, #center-go-left").click(function(e) {
                e.preventDefault();
                // console.log("hua!", currentSlide);
                if (currentSlide != 'center') {
                    slideTo('center');
                    return false;
                }else{

                    slideTo(this.id.replace("center-go-", ""));
                }
            });
            // $About.find("#center-go-right").click(function(e) {
            //     e.preventDefault();
            //     console.log("hua!", currentSlide);
            //     if (currentSlide != 'center') {
            //         slideTo('center');
            //         return false;
            //     }
            //     slideTo(this.id.replace("center-go-", ""));
            // });

        }


        //RIGHT NAVIGATION
        function onRightNavigationClick(event) {
            var page = event.target.id.replace("link-", "");
            event.preventDefault();
        }

        function onRightVerticalNavClick(event) {
            event.preventDefault();
            var parentA = $(event.target).parent();
            var isEnabled = !parentA.hasClass('null');
            if (isEnabled) {
                $About.find(".right-slide a.down, .right-slide a.up").removeClass("null");
                switch (parentA[0].id) {
                    case 'bio-down':
                        // console.log("bio-down");
                        currentBioPage = currentBioPage + 1;
                        navigation.animations({
                            action: "right-show-bio-2"
                        });
                        break;
                    case 'bio-up':
                        // console.log("bio-up");
                        currentBioPage = currentBioPage - 1;
                        navigation.animations({
                            action: "right-show-bio-1"
                        });
                        break;
                }
                parentA.addClass("null");
            }
        }

        //LEFT NAVIGATION
        function onLeftNavigationClick(event) {
            event.preventDefault();
            var page = event.target.id.replace("link-", "");
        }

        function onLeftVerticalNavClick(event) {
            event.preventDefault();
            var parentA = $(event.target).parent();
            var isEnabled = !parentA.hasClass('null');

            if (isEnabled) {
                $About.find(".left-slide a.down, .left-slide a.up").removeClass("null");
                switch (parentA[0].id) {
                    case 'historia-down':
                        // console.log("historia-down");
                        // currentHistoryPage = currentHistoryPage + 1;
                        navigation.animations({
                            action: "left-show-history-2"
                        });
                        break;
                    case 'historia-up':
                        // console.log("historia-up");
                        // currentHistoryPage = currentHistoryPage - 1;
                        navigation.animations({
                            action: "left-show-history-1"
                        });
                        break;
                }
                parentA.addClass("null");
            }

        }

        _onLoadImages(data.images, function() {
            var loadIntro = function() {
                setTimeout(function() {
                    intro.init({});
                }, 1);
            }


            $About.removeLoader({
                onComplete: function() {
                    slideTo('center', false, loadIntro);
                    navigation.init();
                }
            });
        });


        function bindAll() {
            addButtonTriggers();
            toggleCenterNavigation();
            handleCustomResize();
            //span center
            $(window).resize(function() {
                slideTo(currentSlide, true);
            });
        };


    },
    cachedElements: function() {
        $About = $("#section-about");
        $Window = $(window);
    }
};

