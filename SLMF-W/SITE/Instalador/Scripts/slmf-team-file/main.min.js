// Generated by CoffeeScript 1.6.2
/*!
jQuery Waypoints - v2.0.5
Copyright (c) 2011-2014 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt
*/
(function(){var t=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++){if(e in this&&this[e]===t)return e}return-1},e=[].slice;(function(t,e){if(typeof define==="function"&&define.amd){return define("waypoints",["jquery"],function(n){return e(n,t)})}else{return e(t.jQuery,t)}})(window,function(n,r){var i,o,l,s,f,u,c,a,h,d,p,y,v,w,g,m;i=n(r);a=t.call(r,"ontouchstart")>=0;s={horizontal:{},vertical:{}};f=1;c={};u="waypoints-context-id";p="resize.waypoints";y="scroll.waypoints";v=1;w="waypoints-waypoint-ids";g="waypoint";m="waypoints";o=function(){function t(t){var e=this;this.$element=t;this.element=t[0];this.didResize=false;this.didScroll=false;this.id="context"+f++;this.oldScroll={x:t.scrollLeft(),y:t.scrollTop()};this.waypoints={horizontal:{},vertical:{}};this.element[u]=this.id;c[this.id]=this;t.bind(y,function(){var t;if(!(e.didScroll||a)){e.didScroll=true;t=function(){e.doScroll();return e.didScroll=false};return r.setTimeout(t,n[m].settings.scrollThrottle)}});t.bind(p,function(){var t;if(!e.didResize){e.didResize=true;t=function(){n[m]("refresh");return e.didResize=false};return r.setTimeout(t,n[m].settings.resizeThrottle)}})}t.prototype.doScroll=function(){var t,e=this;t={horizontal:{newScroll:this.$element.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.$element.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};if(a&&(!t.vertical.oldScroll||!t.vertical.newScroll)){n[m]("refresh")}n.each(t,function(t,r){var i,o,l;l=[];o=r.newScroll>r.oldScroll;i=o?r.forward:r.backward;n.each(e.waypoints[t],function(t,e){var n,i;if(r.oldScroll<(n=e.offset)&&n<=r.newScroll){return l.push(e)}else if(r.newScroll<(i=e.offset)&&i<=r.oldScroll){return l.push(e)}});l.sort(function(t,e){return t.offset-e.offset});if(!o){l.reverse()}return n.each(l,function(t,e){if(e.options.continuous||t===l.length-1){return e.trigger([i])}})});return this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}};t.prototype.refresh=function(){var t,e,r,i=this;r=n.isWindow(this.element);e=this.$element.offset();this.doScroll();t={horizontal:{contextOffset:r?0:e.left,contextScroll:r?0:this.oldScroll.x,contextDimension:this.$element.width(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:r?0:e.top,contextScroll:r?0:this.oldScroll.y,contextDimension:r?n[m]("viewportHeight"):this.$element.height(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};return n.each(t,function(t,e){return n.each(i.waypoints[t],function(t,r){var i,o,l,s,f;i=r.options.offset;l=r.offset;o=n.isWindow(r.element)?0:r.$element.offset()[e.offsetProp];if(n.isFunction(i)){i=i.apply(r.element)}else if(typeof i==="string"){i=parseFloat(i);if(r.options.offset.indexOf("%")>-1){i=Math.ceil(e.contextDimension*i/100)}}r.offset=o-e.contextOffset+e.contextScroll-i;if(r.options.onlyOnScroll&&l!=null||!r.enabled){return}if(l!==null&&l<(s=e.oldScroll)&&s<=r.offset){return r.trigger([e.backward])}else if(l!==null&&l>(f=e.oldScroll)&&f>=r.offset){return r.trigger([e.forward])}else if(l===null&&e.oldScroll>=r.offset){return r.trigger([e.forward])}})})};t.prototype.checkEmpty=function(){if(n.isEmptyObject(this.waypoints.horizontal)&&n.isEmptyObject(this.waypoints.vertical)){this.$element.unbind([p,y].join(" "));return delete c[this.id]}};return t}();l=function(){function t(t,e,r){var i,o;if(r.offset==="bottom-in-view"){r.offset=function(){var t;t=n[m]("viewportHeight");if(!n.isWindow(e.element)){t=e.$element.height()}return t-n(this).outerHeight()}}this.$element=t;this.element=t[0];this.axis=r.horizontal?"horizontal":"vertical";this.callback=r.handler;this.context=e;this.enabled=r.enabled;this.id="waypoints"+v++;this.offset=null;this.options=r;e.waypoints[this.axis][this.id]=this;s[this.axis][this.id]=this;i=(o=this.element[w])!=null?o:[];i.push(this.id);this.element[w]=i}t.prototype.trigger=function(t){if(!this.enabled){return}if(this.callback!=null){this.callback.apply(this.element,t)}if(this.options.triggerOnce){return this.destroy()}};t.prototype.disable=function(){return this.enabled=false};t.prototype.enable=function(){this.context.refresh();return this.enabled=true};t.prototype.destroy=function(){delete s[this.axis][this.id];delete this.context.waypoints[this.axis][this.id];return this.context.checkEmpty()};t.getWaypointsByElement=function(t){var e,r;r=t[w];if(!r){return[]}e=n.extend({},s.horizontal,s.vertical);return n.map(r,function(t){return e[t]})};return t}();d={init:function(t,e){var r;e=n.extend({},n.fn[g].defaults,e);if((r=e.handler)==null){e.handler=t}this.each(function(){var t,r,i,s;t=n(this);i=(s=e.context)!=null?s:n.fn[g].defaults.context;if(!n.isWindow(i)){i=t.closest(i)}i=n(i);r=c[i[0][u]];if(!r){r=new o(i)}return new l(t,r,e)});n[m]("refresh");return this},disable:function(){return d._invoke.call(this,"disable")},enable:function(){return d._invoke.call(this,"enable")},destroy:function(){return d._invoke.call(this,"destroy")},prev:function(t,e){return d._traverse.call(this,t,e,function(t,e,n){if(e>0){return t.push(n[e-1])}})},next:function(t,e){return d._traverse.call(this,t,e,function(t,e,n){if(e<n.length-1){return t.push(n[e+1])}})},_traverse:function(t,e,i){var o,l;if(t==null){t="vertical"}if(e==null){e=r}l=h.aggregate(e);o=[];this.each(function(){var e;e=n.inArray(this,l[t]);return i(o,e,l[t])});return this.pushStack(o)},_invoke:function(t){this.each(function(){var e;e=l.getWaypointsByElement(this);return n.each(e,function(e,n){n[t]();return true})});return this}};n.fn[g]=function(){var t,r;r=arguments[0],t=2<=arguments.length?e.call(arguments,1):[];if(d[r]){return d[r].apply(this,t)}else if(n.isFunction(r)){return d.init.apply(this,arguments)}else if(n.isPlainObject(r)){return d.init.apply(this,[null,r])}else if(!r){return n.error("jQuery Waypoints needs a callback function or handler option.")}else{return n.error("The "+r+" method does not exist in jQuery Waypoints.")}};n.fn[g].defaults={context:r,continuous:true,enabled:true,horizontal:false,offset:0,triggerOnce:false};h={refresh:function(){return n.each(c,function(t,e){return e.refresh()})},viewportHeight:function(){var t;return(t=r.innerHeight)!=null?t:i.height()},aggregate:function(t){var e,r,i;e=s;if(t){e=(i=c[n(t)[0][u]])!=null?i.waypoints:void 0}if(!e){return[]}r={horizontal:[],vertical:[]};n.each(r,function(t,i){n.each(e[t],function(t,e){return i.push(e)});i.sort(function(t,e){return t.offset-e.offset});r[t]=n.map(i,function(t){return t.element});return r[t]=n.unique(r[t])});return r},above:function(t){if(t==null){t=r}return h._filter(t,"vertical",function(t,e){return e.offset<=t.oldScroll.y})},below:function(t){if(t==null){t=r}return h._filter(t,"vertical",function(t,e){return e.offset>t.oldScroll.y})},left:function(t){if(t==null){t=r}return h._filter(t,"horizontal",function(t,e){return e.offset<=t.oldScroll.x})},right:function(t){if(t==null){t=r}return h._filter(t,"horizontal",function(t,e){return e.offset>t.oldScroll.x})},enable:function(){return h._invoke("enable")},disable:function(){return h._invoke("disable")},destroy:function(){return h._invoke("destroy")},extendFn:function(t,e){return d[t]=e},_invoke:function(t){var e;e=n.extend({},s.vertical,s.horizontal);return n.each(e,function(e,n){n[t]();return true})},_filter:function(t,e,r){var i,o;i=c[n(t)[0][u]];if(!i){return[]}o=[];n.each(i.waypoints[e],function(t,e){if(r(i,e)){return o.push(e)}});o.sort(function(t,e){return t.offset-e.offset});return n.map(o,function(t){return t.element})}};n[m]=function(){var t,n;n=arguments[0],t=2<=arguments.length?e.call(arguments,1):[];if(h[n]){return h[n].apply(null,t)}else{return h.aggregate.call(null,n)}};n[m].settings={resizeThrottle:100,scrollThrottle:30};return i.on("load.waypoints",function(){return n[m]("refresh")})})}).call(this);


Intro = function(data) {

    this.settings = {
        bg: $Poses.find(".poses-img-content").eq(0).find("img.normal"),
        h1: $Data.find("h1"),
        h2: $Data.find("h2"),
        h3: $Data.find("h3"),
        imgCard: $Data.find("h2 img"),
        line1: $Data.find(".line-1"),
        line2: $Data.find(".line-2"),
        medidasData1: $Data.find("ul.medidas-1 li"),
        medidasData2: $Data.find("ul.medidas-2 li"),
        medidasData2: $Data.find("ul.medidas-2 li"),
        posesData: $Data.find("#data-poses ul li"),
        btOpen: $Data.find(".bt-open"),
        btSlmfTeam: $SlmfTeamFile.find("#bt-slmf-team"),
        btSknfTean2: $SlmfTeamFile.find("#bt-slmfteam"),
        gallery: $SlmfTeamFile.find("#data-content-gallery"),
    }
    this.onComplete = data.onComplete || {};
};
Intro.prototype.init = function(data) {

    // Bug safari
    if (this.settings.posesData.length <= 0) {
        this.settings.posesData = $Data.find("#data-poses ul li");
    };

    this.onComplete = this.onComplete || data.onComplete || {};

    this.animate()
};

Intro.prototype.animate = function(action) {

    var self = this;

    // 9
    var btSlmfTeam = function() {

        TweenMax.to(self.settings.btSlmfTeam, .30, {
            marginTop: -96,
            ease: Cubic.easeOut,
            onComplete: self.onComplete
        });
    };
    // 8
    var gallery = function() {

        var left = self.settings.gallery.find(".left-gallery");
        var right = self.settings.gallery.find(".right-gallery");

        TweenLite.set(left, {
            autoAlpha: 1,
        });
        TweenLite.fromTo(left, 0.15, {
            left: 80
        }, {
            left: 0,
            ease: Cubic.easeOut,
            onComplete: function() {

                TweenLite.set(right, {
                    autoAlpha: 1,
                });
                TweenLite.fromTo(right, 0.25, {
                    left: 150
                }, {
                    left: 0,
                    ease: Cubic.easeOut,
                    // onComplete: btSlmfTeam
                });
            }
        });
    };

    // 7
    var poses = function() {

        this.delay = 0;
        this.duration = 0.35;
        for (var i = self.settings.posesData.length - 1; i >= 0; i--) {

            var el = self.settings.posesData[i];

            TweenLite.set(el, {
                autoAlpha: 1,
                delay: this.delay,
            });
            TweenLite.fromTo(el, this.duration, {
                scale: 1.6,
            }, {
                scale: 1,
                delay: this.delay,
                // ease: Cubic.easeOut,
                ease: Power3.easeOut,
            });

            this.delay = this.delay + 0.1;

        };
    };

    // 6
    var buttons = function() {

        var el1 = self.settings.btOpen.eq(0);
        TweenLite.set(el1, {
            autoAlpha: 1,
            left: 80,
            delay: 0.3,
        });
        TweenLite.to(el1, .3, {
            left: 0,
            ease: Cubic.easeOut,
            delay: 0.3,
        });

        var el2 = self.settings.btOpen.eq(1);
        TweenLite.set(el2, {
            autoAlpha: 1,
            delay: 0.5,
        });
        TweenLite.to(el2, .3, {
            left: 0,
            delay: 0.45,
            ease: Cubic.easeOut,
            onComplete: function() {
                poses();
                gallery();
                btSlmfTeam();
            }
        });
    };

    // 5
    var measures = function() {

        this.duration = .4;
        this.delay = 0;
        for (var i = self.settings.medidasData1.length - 1; i >= 0; i--) {

            var el = self.settings.medidasData1[i];
            TweenLite.set(el, {
                autoAlpha: 1,
                delay: this.delay,
            });
            TweenLite.fromTo(el, this.duration, {
                left: -120,
            }, {
                left: 0,
                ease: Cubic.easeOut,
                delay: this.delay,
            });
            this.delay = this.delay + 0.15;
        };

        self.settings.line2.set({
            opacity: 0,
            visibility: "hidden"
        });


        TweenLite.fromTo(self.settings.line2, this.duration, {
            left: -42,
            autoAlpha: 1
        }, {
            left: -0,
            ease: Cubic.easeOut,
        });

        TweenLite.set(self.settings.medidasData2.eq(0).find(".title"), {
            autoAlpha: 1,
            left: -30,
            delay: 0.3,
        });
        TweenLite.to(self.settings.medidasData2.eq(0).find(".title"), .2, {
            left: 0,
            delay: 0.3,
            ease: Cubic.easeOut,
        });

        TweenLite.set(self.settings.medidasData2.eq(0).find(".size"), {
            autoAlpha: 1,
            left: -30,
            delay: 0.3,
        });
        TweenLite.to(self.settings.medidasData2.eq(0).find(".size"), .2, {
            left: 0,
            delay: 0.3,
            ease: Cubic.easeOut,

        });
        TweenLite.set(self.settings.medidasData2.find(".left"), {
            autoAlpha: 1,
            delay: 0.3
        });
        TweenLite.to(self.settings.medidasData2.find(".left"), 0.2, {
            left: 0,
            delay: 0.3,
            ease: Cubic.easeOut,
            onComplete: function() {
                // buttons();

            }
        });
    };

    // 4
    var showBtClose = function() {

        var arrow = self.settings.btSknfTean2.find("span.arrow-content"),
            text = self.settings.btSknfTean2.find("span.text");

        TweenLite.set([arrow, text], {
            autoAlpha: 0
        });

        TweenLite.fromTo(arrow, 0.15, {
            x: 50,
            autoAlpha: 1
        }, {
            x: 18,
            ease: Cubic.easeOut,
            onComplete: function() {

                TweenLite.to(text, 0.15, {
                    autoAlpha: 1,
                });
            }
        });
    };

    // 3
    var lines1 = function() {

        this.duration = 0.25;

        self.settings.line1.set({
            opacity: 0,
            visibility: "hidden"
        });

        TweenLite.fromTo(self.settings.line1, this.duration, {
            left: -42,
            autoAlpha: 1
        }, {
            left: -0,
            ease: Cubic.easeOut,
            onComplete: function() {
                measures();
                showBtClose();
                buttons();
            }
        });

        self.settings.h3.set({
            opacity: 0,
            visibility: "hidden"
        });

        TweenLite.fromTo(self.settings.h3, this.duration, {
            left: 27,
            autoAlpha: 1
        }, {
            left: 0,
            ease: Cubic.easeOut,
        });
    };

    // 2
    var header = function() {

        this.duration = 0.45;

        self.settings.h1.set({
            opacity: 0,
            visibility: "hidden"
        });

        TweenLite.fromTo(self.settings.h1, this.duration, {
            left: -242,
            autoAlpha: 1
        }, {
            ease: Cubic.easeOut,
            left: -4,
            onComplete: lines1
        });


        self.settings.h2.set({
            opacity: 0,
            visibility: "hidden"
        });

        TweenLite.fromTo(self.settings.h2, this.duration, {
            left: -442,
            autoAlpha: 1
        }, {
            ease: Cubic.easeOut,
            left: 0
        });

        self.settings.imgCard.set({
            opacity: 0,
            visibility: "hidden"
        });

        TweenLite.fromTo(self.settings.imgCard, this.duration, {
            left: -442,
            autoAlpha: 1
        }, {
            ease: Cubic.easeOut,
            left: 0
        });
    };

    // 1
    var bg = function() {

        this.duration = .75;
        TweenLite.fromTo(self.settings.bg, this.duration, {
            autoAlpha: 0
        }, {
            autoAlpha: 1,
            ease: Linear.easeNone,
            onComplete: header
        });
        $.each($Poses.find(".poses-img-content img.normal"), function(index, theEl) {
            if (index != 0) {

                TweenLite.set(theEl, {
                    autoAlpha: 0,
                });
            }
        })
    };

    bg();
};

/* **********************************************
     Begin instagram.js
********************************************** */

/**
 * get InstagramFile latest post.
 *
 * @params {object} 	args			-
 * @params {string} 	args.count		- int
 * @params {string} 	args.token		- string, default: "12464375.5b9e1e6.2924280151d74a58a7e437a828decc37"
 * @params {string} 	args.userId		- string, default: "308301284"
 * @params {string} 	args.tag		- string, default: "slmf"
 * @params {string} 	args.filter		- string: "user" || "tags", default: "user"
 * @params {string} 	args.onComplete	- function, on load json
 *
 */
var InstagramFile = (function() {
    'use strict';

    function InstagramFile(args) {

        // enforces new
        if (!(this instanceof InstagramFile)) {
            return new InstagramFile(args);
        };

        this.settings = {
            count: 5,
            total: 100,
            token: "12464375.5b9e1e6.2924280151d74a58a7e437a828decc37",
            userId: "308301284",
            tag: "slmf",
            filter: "user",
            numCharacters: 140,
            monthNames: ["ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"],
            container: $(".slmf-team #data-content-gallery .right-gallery ul"),
            onComplete: function() {},
        };
        this.data = {};

        $.extend(true, this.settings, args || {});

        var self = this;

        switch (this.settings.filter) {
            case "user":
                $.ajax({
                    type: "GET",
                    dataType: "jsonp",
                    cache: false,
                    url: "https://api.instagram.com/v1/users/" + this.settings.userId + "/media/recent/?access_token=" + this.settings.token + "&count=" + this.settings.total,
                    success: function(data) {

                        self.data = data.data;
                        self.render();
                    }
                });
                break;
            case "tag":
                $.ajax({
                    type: "GET",
                    dataType: "jsonp",
                    cache: false,
                    url: "https://api.instagram.com/v1/tags/" + this.settings.tag + "/media/recent?access_token=" + this.settings.token + "&count=" + this.settings.count,
                    success: function(data) {

                        self.data = data.data;
                        self.render();
                    }
                });
                break;
        };
    };

    /**
     * Append the items.
     *
     * @fires InstagramFile
     */
    InstagramFile.prototype.render = function() {
        var months = this.settings.monthNames,
            numCharacters = this.settings.numCharacters,
            container = this.settings.container,
            tag = "#" + this.settings.tag,
            count = this.settings.count;
        $.each(this.data, function(index, val) {

            var date = new Date(parseInt(val.created_time) * 1000),
                fullText = val.caption != null ? val.caption.text.toLowerCase() : "",
                text = val.caption != null ? val.caption.text.trunc(numCharacters, true) : "", // acorta texto de slide
                tweet = val.caption != null ? val.caption.text.trunc(143 - val.link.length, true) : ""; // acorta texto del tweet
            // isfirst = index <= 0,
            // cl = isfirst ? "first" : "";

            // text = text.wrapp("#", "span");
            if (fullText.indexOf(tag) > -1) {

                count = count - 1;
                container.append("<li style='width: 6.666667%; margin-left:10%;'> <div class='bt'> <span class='point'> <div class='secure'> </div> <div class='image'> <a href='" + val.link + "' target='_blank' title='Ir a Solo los más fuertes' > <img src='" + val.images.low_resolution.url + "' alt='" + text + "' width='218' height='218' class='thumbnail'/> </a> <header> <div class='left'> <div class='caption'> <span class='top'> " + text + "</span> <span class='bottom'> " + date.getFullYear() + "</span> </div> <div class='social'> <a href='http://www.facebook.com/sharer.php?u=" + encodeURIComponent(val.link) + "&t=" + encodeURIComponent(val.caption.text) + "'class='popup'target='_blank'title='Compartir en Facebook'> <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' width='6.932px' height='13.215px' viewBox='0 0 6.932 13.215' enable-background='new 0 0 6.932 13.215' xml:space='preserve'> <path fill='#303030' d='M6.932,2.415V0.151C1.74-0.839,1.824,3.363,1.824,3.363v0.729H0V6.5h1.824v0.219v6.496h2.992V6.5h2.115  V4.092H4.871c0.016-0.346,0.024-0.541,0.041-0.799C4.991,2.069,6.932,2.415,6.932,2.415z'></path> </svg> </a> <span></span> <a href='http://twitter.com/intent/tweet?text=" + encodeURIComponent(tweet) + "&url=" + encodeURIComponent(val.link) + "'class='popup'target='_blank'title='Compartir en Twitter'> <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' width='16.095px' height='13.082px' viewBox='0 0 16.095 13.082' enable-background='new 0 0 16.095 13.082' xml:space='preserve'> <path fill='#303030' d='M13.483,1.089c0,0,1.148-0.217,2.166-0.802c0,0-0.346,1.191-1.473,1.82c0,0,1.387-0.151,1.918-0.52  c0,0-0.855,1.365-1.658,1.604c0,0,0.52,3.988-2.904,7.391C8.107,13.986,2.753,13.466,0,11.668c0,0,2.341,0.367,4.854-1.324  c0,0-2.123,0.108-3.164-2.254c0,0,1.02,0.087,1.691-0.13c0,0-2.623-0.519-2.797-3.229c0,0,0.715,0.391,1.475,0.368  c0,0-2.473-1.69-0.998-4.356c0,0,2.71,3.186,6.829,3.424c0,0-0.607-2.579,1.798-3.771C12.095-0.797,13.483,1.089,13.483,1.089z'></path> </svg> </a> </div> </div> <div class='right bt-social'> <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='17.174px' height='25.102px' viewBox='0 0 17.174 25.102' enable-background='new 0 0 17.174 25.102' xml:space='preserve'> <path d='M13.924,8.538c-0.648,0-1.25,0.191-1.757,0.519L6.31,4.342C6.432,4,6.502,3.634,6.502,3.25 C6.502,1.455,5.046,0,3.251,0C1.456,0,0,1.455,0,3.25s1.456,3.25,3.251,3.25c0.632,0,1.221-0.184,1.721-0.496l5.878,4.731 c-0.113,0.331-0.177,0.684-0.177,1.052c0,0.473,0.103,0.921,0.284,1.326l-6.278,5.82c-0.431-0.212-0.914-0.333-1.428-0.333 C1.456,18.601,0,20.056,0,21.851s1.456,3.25,3.251,3.25c1.795,0,3.251-1.455,3.251-3.25c0-0.502-0.117-0.975-0.32-1.4l6.239-5.782 c0.45,0.235,0.96,0.37,1.503,0.37c1.795,0,3.25-1.455,3.25-3.25C17.174,9.993,15.719,8.538,13.924,8.538z'> </path> </svg> </div> </header> <div class='triangle'> </div> </div> </span> <div class='ro'> </div> </div> </li>");
                // container.append("<li style='width: 6.666667%; margin-left:10%;'> <div class='bt'> <span class='point'> <div class='secure'></div><div class='image'> <a href='" + val.link + "' target='_blank' title='Ir a Solo los más fuertes' > <img src='" + val.images.low_resolution.url + "' alt='" + text + "' width='218' height='218' class='thumbnail'/> </a> <header> <div class='left'> <div class='caption'> <span class='top'> " + text + "</span> <span class='bottom'> " + date.getFullYear() + "</span> </div> <div class='social'> <a href='http://www.facebook.com/sharer.php?u=" + encodeURIComponent(val.link) + "&t=" + encodeURIComponent(val.caption.text) + "'class='popup'target='_blank'title='Compartir en Facebook'> <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' width='6px' height='11px' viewBox='0 0 6 11' enable-background='new 0 0 6 11' xml:space='preserve'> <path fill='#010101' d='M1346,3460.341c0-0.817-0.322-1.341-1.122-1.341h-6.767c-1.133-0.044-2.111,0.523-2.111,1.341v6.695  c0,1.058,1.049,1.964,2.111,1.964h6.375c1.031,0,1.514-1.146,1.514-1.964V3460.341z M1344.965,3461.747  c0,0.108-0.088,0.196-0.196,0.196h-1.294c-0.109,0-0.197-0.088-0.197-0.196v-1.296c0-0.108,0.088-0.195,0.197-0.195h1.294  c0.108,0,0.196,0.087,0.196,0.195V3461.747z M1341.006,3461.875c0.986,0,1.789,0.803,1.789,1.791c0,0.986-0.803,1.789-1.789,1.789  c-0.988,0-1.791-0.803-1.791-1.789C1339.215,3462.678,1340.018,3461.875,1341.006,3461.875z M1345,3466.891  c0,0.734-0.76,1.109-1.016,1.109h-5.729c-0.706-0.083-1.256-0.852-1.256-1.109V3463h1.378c-0.104,0-0.161,0.472-0.161,0.798  c0,1.537,1.252,2.722,2.789,2.722s2.787-1.151,2.787-2.689c0-0.326-0.057-0.83-0.16-0.83H1345V3466.891z'></path> <path fill='#010101' d='M1294.81,3460.622l1.19-0.051v-2.002l-0.327-0.072c-0.441-0.078-0.817-0.117-1.2-0.117  c-1.699,0-2.5,0.758-2.891,1.393c-0.373,0.606-0.496,1.179-0.502,1.351c-0.003,0.039-0.08,0.066-0.08,0.066V3462h-1v1v1h1v5h2.174  H1294v-5h1.174H1296v-2h-1.953c-0.033-0.17-0.086-0.514-0.088-0.572C1294.092,3460.455,1294.805,3460.623,1294.81,3460.622z'></path> <path fill='#010101' d='M1316.65,3466h-2.209c-1.038,0.187-1.441-1.162-1.441-1.703V3464h3.65c0.868,0,1.549-0.659,1.549-1.5  s-0.681-1.5-1.549-1.5H1313v-1.188c0-0.868-0.659-1.549-1.5-1.549s-1.5,0.681-1.5,1.549v4.485c0,2.073,2.184,4.703,4.441,4.703  h2.209c0.868,0,1.549-0.659,1.549-1.5S1317.519,3466,1316.65,3466z M1316.864,3467.039c-0.071-0.014-0.138-0.039-0.214-0.039  C1316.724,3467,1316.796,3467.015,1316.864,3467.039z M1316.865,3462.039c-0.072-0.014-0.139-0.039-0.215-0.039  C1316.724,3462,1316.796,3462.015,1316.865,3462.039z M1312.135,3459.598c0.024,0.068,0.039,0.141,0.039,0.214  C1312.174,3459.736,1312.148,3459.669,1312.135,3459.598z'></path> <path fill='#010101' d='M1346,3460.341c0-0.817-0.322-1.341-1.122-1.341h-6.767c-1.133-0.044-2.111,0.523-2.111,1.341v6.695  c0,1.058,1.049,1.964,2.111,1.964h6.375c1.031,0,1.514-1.146,1.514-1.964V3460.341z M1344.965,3461.747  c0,0.108-0.088,0.196-0.196,0.196h-1.294c-0.109,0-0.197-0.088-0.197-0.196v-1.296c0-0.108,0.088-0.195,0.197-0.195h1.294  c0.108,0,0.196,0.087,0.196,0.195V3461.747z M1341.006,3461.875c0.986,0,1.789,0.803,1.789,1.791c0,0.986-0.803,1.789-1.789,1.789  c-0.988,0-1.791-0.803-1.791-1.789C1339.215,3462.678,1340.018,3461.875,1341.006,3461.875z M1345,3466.891  c0,0.734-0.76,1.109-1.016,1.109h-5.729c-0.706-0.083-1.256-0.852-1.256-1.109V3463h1.378c-0.104,0-0.161,0.472-0.161,0.798  c0,1.537,1.252,2.722,2.789,2.722s2.787-1.151,2.787-2.689c0-0.326-0.057-0.83-0.16-0.83H1345V3466.891z'></path> <path fill='#010101' d='M1294.81,3460.622l1.19-0.051v-2.002l-0.327-0.072c-0.441-0.078-0.817-0.117-1.2-0.117  c-1.699,0-2.5,0.758-2.891,1.393c-0.373,0.606-0.496,1.179-0.502,1.351c-0.003,0.039-0.08,0.066-0.08,0.066V3462h-1v1v1h1v5h2.174  H1294v-5h1.174H1296v-2h-1.953c-0.033-0.17-0.086-0.514-0.088-0.572C1294.092,3460.455,1294.805,3460.623,1294.81,3460.622z'></path> <path fill='#010101' d='M1316.65,3466h-2.209c-1.038,0.187-1.441-1.162-1.441-1.703V3464h3.65c0.868,0,1.549-0.659,1.549-1.5  s-0.681-1.5-1.549-1.5H1313v-1.188c0-0.868-0.659-1.549-1.5-1.549s-1.5,0.681-1.5,1.549v4.485c0,2.073,2.184,4.703,4.441,4.703  h2.209c0.868,0,1.549-0.659,1.549-1.5S1317.519,3466,1316.65,3466z M1316.864,3467.039c-0.071-0.014-0.138-0.039-0.214-0.039  C1316.724,3467,1316.796,3467.015,1316.864,3467.039z M1316.865,3462.039c-0.072-0.014-0.139-0.039-0.215-0.039  C1316.724,3462,1316.796,3462.015,1316.865,3462.039z M1312.135,3459.598c0.024,0.068,0.039,0.141,0.039,0.214  C1312.174,3459.736,1312.148,3459.669,1312.135,3459.598z'></path> <path fill='#D7D8D8' d='M4.81,2.622L6,2.571V0.569L5.673,0.497C5.231,0.419,4.856,0.38,4.472,0.38c-1.699,0-2.5,0.758-2.89,1.393  C1.209,2.379,1.086,2.951,1.08,3.123C1.077,3.162,1,4,1,4l0,0H0v1v1h1v5h2.174H4V6h1.174H6V4L3.938,4.016  c-0.033-0.17,0.024-0.529,0.022-0.588C4.078,2.547,4.805,2.623,4.81,2.622z'></path> </svg> </a> <span> | </span> <a href='http://twitter.com/intent/tweet?text=" + encodeURIComponent(tweet) + "&url=" + encodeURIComponent(val.link) + "'class='popup'target='_blank'title='Compartir en Twitter'> <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' x='0px' y='0px' width='8.1px' height='11px' viewBox='0 0 8.1 11' enable-background='new 0 0 8.1 11' xml:space='preserve'> <path fill='#010101' d='M1346,3460.341c0-0.817-0.322-1.341-1.122-1.341h-6.767c-1.133-0.044-2.111,0.523-2.111,1.341v6.695  c0,1.058,1.049,1.964,2.111,1.964h6.375c1.031,0,1.514-1.146,1.514-1.964V3460.341z M1344.965,3461.747  c0,0.108-0.088,0.196-0.196,0.196h-1.294c-0.109,0-0.197-0.088-0.197-0.196v-1.296c0-0.108,0.088-0.195,0.197-0.195h1.294  c0.108,0,0.196,0.087,0.196,0.195V3461.747z M1341.006,3461.875c0.986,0,1.789,0.803,1.789,1.791c0,0.986-0.803,1.789-1.789,1.789  c-0.988,0-1.791-0.803-1.791-1.789C1339.215,3462.678,1340.018,3461.875,1341.006,3461.875z M1345,3466.891  c0,0.734-0.76,1.109-1.016,1.109h-5.729c-0.706-0.083-1.256-0.852-1.256-1.109V3463h1.378c-0.104,0-0.161,0.472-0.161,0.798  c0,1.537,1.252,2.722,2.789,2.722s2.787-1.151,2.787-2.689c0-0.326-0.057-0.83-0.16-0.83H1345V3466.891z'></path> <path fill='#010101' d='M1294.81,3460.622l1.19-0.051v-2.002l-0.327-0.072c-0.441-0.078-0.817-0.117-1.2-0.117  c-1.699,0-2.5,0.758-2.891,1.393c-0.373,0.606-0.496,1.179-0.502,1.351c-0.003,0.039-0.08,0.066-0.08,0.066V3462h-1v1v1h1v5h2.174  H1294v-5h1.174H1296v-2h-1.953c-0.033-0.17-0.086-0.514-0.088-0.572C1294.092,3460.455,1294.805,3460.623,1294.81,3460.622z'></path> <path fill='#010101' d='M1316.65,3466h-2.209c-1.038,0.187-1.441-1.162-1.441-1.703V3464h3.65c0.868,0,1.549-0.659,1.549-1.5  s-0.681-1.5-1.549-1.5H1313v-1.188c0-0.868-0.659-1.549-1.5-1.549s-1.5,0.681-1.5,1.549v4.485c0,2.073,2.184,4.703,4.441,4.703  h2.209c0.868,0,1.549-0.659,1.549-1.5S1317.519,3466,1316.65,3466z M1316.864,3467.039c-0.071-0.014-0.138-0.039-0.214-0.039  C1316.724,3467,1316.796,3467.015,1316.864,3467.039z M1316.865,3462.039c-0.072-0.014-0.139-0.039-0.215-0.039  C1316.724,3462,1316.796,3462.015,1316.865,3462.039z M1312.135,3459.598c0.024,0.068,0.039,0.141,0.039,0.214  C1312.174,3459.736,1312.148,3459.669,1312.135,3459.598z'></path> <path fill='#010101' d='M1346,3460.341c0-0.817-0.322-1.341-1.122-1.341h-6.767c-1.133-0.044-2.111,0.523-2.111,1.341v6.695  c0,1.058,1.049,1.964,2.111,1.964h6.375c1.031,0,1.514-1.146,1.514-1.964V3460.341z M1344.965,3461.747  c0,0.108-0.088,0.196-0.196,0.196h-1.294c-0.109,0-0.197-0.088-0.197-0.196v-1.296c0-0.108,0.088-0.195,0.197-0.195h1.294  c0.108,0,0.196,0.087,0.196,0.195V3461.747z M1341.006,3461.875c0.986,0,1.789,0.803,1.789,1.791c0,0.986-0.803,1.789-1.789,1.789  c-0.988,0-1.791-0.803-1.791-1.789C1339.215,3462.678,1340.018,3461.875,1341.006,3461.875z M1345,3466.891  c0,0.734-0.76,1.109-1.016,1.109h-5.729c-0.706-0.083-1.256-0.852-1.256-1.109V3463h1.378c-0.104,0-0.161,0.472-0.161,0.798  c0,1.537,1.252,2.722,2.789,2.722s2.787-1.151,2.787-2.689c0-0.326-0.057-0.83-0.16-0.83H1345V3466.891z'></path> <path fill='#010101' d='M1294.81,3460.622l1.19-0.051v-2.002l-0.327-0.072c-0.441-0.078-0.817-0.117-1.2-0.117  c-1.699,0-2.5,0.758-2.891,1.393c-0.373,0.606-0.496,1.179-0.502,1.351c-0.003,0.039-0.08,0.066-0.08,0.066V3462h-1v1v1h1v5h2.174  H1294v-5h1.174H1296v-2h-1.953c-0.033-0.17-0.086-0.514-0.088-0.572C1294.092,3460.455,1294.805,3460.623,1294.81,3460.622z'></path> <path fill='#010101' d='M1316.65,3466h-2.209c-1.038,0.187-1.441-1.162-1.441-1.703V3464h3.65c0.868,0,1.549-0.659,1.549-1.5  s-0.681-1.5-1.549-1.5H1313v-1.188c0-0.868-0.659-1.549-1.5-1.549s-1.5,0.681-1.5,1.549v4.485c0,2.073,2.184,4.703,4.441,4.703  h2.209c0.868,0,1.549-0.659,1.549-1.5S1317.519,3466,1316.65,3466z M1316.864,3467.039c-0.071-0.014-0.138-0.039-0.214-0.039  C1316.724,3467,1316.796,3467.015,1316.864,3467.039z M1316.865,3462.039c-0.072-0.014-0.139-0.039-0.215-0.039  C1316.724,3462,1316.796,3462.015,1316.865,3462.039z M1312.135,3459.598c0.024,0.068,0.039,0.141,0.039,0.214  C1312.174,3459.736,1312.148,3459.669,1312.135,3459.598z'></path> <path fill='#D7D8D8' d='M6.551,8H4.342C3.304,8,3,6.575,3,6.034V6h3.551C7.419,6,8.1,5.341,8.1,4.5S7.419,3,6.551,3H3V1.549  C3,0.681,2.341,0,1.5,0S0,0.681,0,1.549v4.485C0,8.107,2.084,11,4.342,11h2.209C7.419,11,8.1,10.341,8.1,9.5S7.419,8,6.551,8z   M6.765,8.776C6.693,8.763,6.627,8.737,6.551,8.737C6.624,8.737,6.696,8.752,6.765,8.776z M6.766,3.776  C6.693,3.763,6.627,3.737,6.551,3.737C6.624,3.737,6.696,3.752,6.766,3.776z M2.035,1.335C2.06,1.403,2.074,1.476,2.074,1.549  C2.074,1.474,2.049,1.406,2.035,1.335z'></path> </svg> </a> </div> </div> <div class='right bt-social'> <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='17.174px' height='25.102px' viewBox='0 0 17.174 25.102' enable-background='new 0 0 17.174 25.102' xml:space='preserve'> <path d='M13.924,8.538c-0.648,0-1.25,0.191-1.757,0.519L6.31,4.342C6.432,4,6.502,3.634,6.502,3.25 C6.502,1.455,5.046,0,3.251,0C1.456,0,0,1.455,0,3.25s1.456,3.25,3.251,3.25c0.632,0,1.221-0.184,1.721-0.496l5.878,4.731 c-0.113,0.331-0.177,0.684-0.177,1.052c0,0.473,0.103,0.921,0.284,1.326l-6.278,5.82c-0.431-0.212-0.914-0.333-1.428-0.333 C1.456,18.601,0,20.056,0,21.851s1.456,3.25,3.251,3.25c1.795,0,3.251-1.455,3.251-3.25c0-0.502-0.117-0.975-0.32-1.4l6.239-5.782 c0.45,0.235,0.96,0.37,1.503,0.37c1.795,0,3.25-1.455,3.25-3.25C17.174,9.993,15.719,8.538,13.924,8.538z'></path> </svg> </div> </header> <div class='triangle'></div> </div> </span> <div class='ro'></div></div> </li>");
            };
            if (count <= 0) {
                return false;
            };
        });


        this.settings.onComplete();
        this.bind({
            action: "popup"
        });
    };

    /**
     * Append the items.
     *
     * @params {object}	params.action 	- string: "slider"
     *
     * @fires InstagramFile
     */
    InstagramFile.prototype.bind = function(params) {

        switch (params.action) {
            case "popup":

                this.settings.container.find('.popup')
                    .on("click", function(e) {

                        e.preventDefault();

                        var width = 575,
                            height = 400,
                            left = (window.screen.width / 2) - ((width / 2) + 10),
                            top = (window.screen.height / 2) - ((height / 2) + 50),
                            url = this.href,
                            opts = 'status=1' +
                            ',width=' + width +
                            ',height=' + height +
                            ',top=' + top +
                            ',left=' + left;

                        window.open(url, 'twitter', opts);
                    });
                break;
        };
    };

    return InstagramFile;
}());


Gallery = function() {

    this.settings = {
        bt: $Gallery.find(".bt"),
        btSocial: $Gallery.find(".bt-social"),
        header: $Gallery.find("header"),
        imgs: $Gallery.find(".image"),
    };

    this.init();
};

Gallery.prototype.init = function() {

    this.bind("roll-over-point");
    this.bind("roll-over-social");
};

Gallery.prototype.bind = function(action) {

    var self = this;

    switch (action) {

        case "roll-over-point":

            $.each(this.settings.bt, function(index, val) {

                var el = $(this),
                    image = el.find(".image"),
                    secure = el.find(".secure");

                el.hover(function() {

                    secure.css({
                        width: 150,
                        height: 150,
                        top: -105,
                        left: -105,
                    });
                    el.addClass('active');
                    self.animations({
                        action: "show-img",
                        image: image
                    });
                }, function() {

                    secure.css({
                        width: 60,
                        height: 60,
                        top: -15,
                        left: -15,
                    });
                    self.settings.bt.removeClass('active');
                    self.animations({
                        action: "hidde-img",
                    });
                });

                el.on('click', function(e) {

                    // e.preventDefault();

                    if (el.hasClass('active')) {

                        // cierra
                        self.settings.bt.removeClass('active');
                        self.animations({
                            action: "hidde-img",
                        });

                    } else {

                        self.settings.bt.removeClass('active');
                        el.addClass('active');
                        self.animations({
                            action: "show-img",
                            image: image
                        });
                    };


                });
            });

            break;

        case "roll-over-social":

            self.settings.btSocial
                .mouseenter(function(event) {

                    self.animations({
                        action: "show-social-icons",
                        toHidde: $(this).parent().find(".left .caption"),
                        toShow: $(this).parent().find(".left .social"),
                        toColorContent: $(this).parent().find(".left"),
                        toColorTriangle: $(this).parent().parent().find(".triangle"),
                    });
                    $(this).addClass('active');
                });
            self.settings.header
                .mouseleave(function(event) {

                    self.animations({
                        action: "hidde-social-icons",
                        toHidde: $(this).find(".left .social"),
                        toShow: $(this).find(".left .caption"),
                        toColorContent: $(this).find(".left"),
                        toColorTriangle: $(this).parent().find(".triangle"),
                    });
                    $(this).find(".bt-social").removeClass('active');
                });
            break;
    };
};

Gallery.prototype.animations = function(params) {

    var self = this;
    switch (params.action) {

        case "show-img":
            this.animations({
                action: "hidde-img",
            });
            params.image.css({
                display: "block"
            });

            var toY = -120,
                toX = -120,
                fromY = -103,
                fromX = -103;
            if (!Modernizr.testProp('webkitAppearance')) {
                toY = -253;
                toX = -125;
                fromY = -233;
                fromX = -105;
            };

            TweenMax.fromTo(params.image, .25, {

                y: fromY,
                x: fromX
            }, {

                autoAlpha: 1,
                ease: Cubic.easeInOut,
                y: toY,
                x: toX
            });
            break;

        case "hidde-img":
            $.each(self.settings.imgs, function(index, val) {

                var el = $(this);


                TweenMax.to(el, 0, {

                    autoAlpha: 0,
                    onComplete: function() {
                        self.settings.imgs.css({
                            display: "none"
                        })
                    }
                });
            });
            break;

        case "show-social-icons":

            TweenLite.to(params.toHidde, 0.1, {
                autoAlpha: 0,
                ease: Cubic.easeOut,
            });

            params.toShow.css('display', 'block');

            params.toColorContent.css({
                backgroundColor: "#f6d641"
            });
            params.toColorTriangle.css({
                borderColor: "#f6d641 transparent transparent transparent"
            })

            // var list = params.toShow.find("a svg"),
            //     pipeline = params.toShow.find("span"),
            //     delay = 0.1;

            // for (var i = list.length - 1; i >= 0; i--) {

            //     TweenLite.to(list[i], 0, {
            //         autoAlpha: 0,
            //         scale: 1.6,
            //     });
            //     TweenLite.to(list[i], 0, {
            //         autoAlpha: 1,
            //         delay: delay,
            //     })
            //     TweenLite.to(list[i], 0.15, {
            //         scale: 1.3,
            //         ease: Power2.easeOut,
            //         delay: delay
            //     });
            //     delay = delay + 0.15;
            // };
            // TweenLite.to(pipeline, 0, {
            //     autoAlpha: 0,
            // });
            // TweenLite.to(pipeline, 0.25, {
            //     autoAlpha: 1,
            //     ease: Linear.easeNone,
            //     delay: 0.3
            // });
            break;

        case "hidde-social-icons":
            TweenLite.to(params.toShow, 0.15, {
                autoAlpha: 1
            });
            // TweenLite.set([params.toHidde.find("a svg"), params.toHidde.find("span")], {
            //     autoAlpha: 0
            // });
            params.toColorContent.css({
                backgroundColor: "#5d5d5d"
            });
            params.toColorTriangle.css({
                borderColor: "#5d5d5d transparent transparent transparent"
            })
            params.toHidde.css('display', 'none');
            break;
    };
};

List = function() {

    this.settings = {

        // btOpen: $Data.find("#bt-entrevista"),
        // btToHidde: $Data.find("#bt-premios"),
        // btClose: $Data.find("#bt-close-entrevista"),
        // toHidde: $SlmfTeamFile.find("#bt-premios, #data-medidas, #data-poses, #data-content-gallery, #bt-slmf-team a"),
        // posesImg: $Poses.find(".poses-img-content img"),
        // list: $Poses.find("#list-enterview li"),
        // container: $Poses.find("#list-enterview"),
        // content: $Poses.find("#list-enterview .content"),
        // btUp: $Poses.find("#bt-enterview-up"),
        // btDown: $Poses.find("#bt-enterview-down"),
        // countList: 0,
        // pos: 0
    };
};

List.prototype.init = function() {

    this.settings.countList = this.settings.list.length;
    this.bind("open");
    this.bind("close");
    this.bind("scroll");
};

List.prototype.bind = function(action) {

    var self = this;

    switch (action) {
        case "open":

            self.settings.btOpen.addClass('canOpen');

            self.settings.btOpen
                .on('click', function(event) {

                    event.preventDefault();

                    var el = $(this);

                    if (el.hasClass('animating')) {
                        return;
                    };

                    if (el.hasClass('canOpen')) {

                        el.removeClass('canOpen')

                        self.settings.btOpen.addClass('animating');
                        self.settings.btClose.addClass('animating');

                        self.animations("open");
                    };
                });
            break;
        case "close":

            $.each(
                [self.settings.btOpen, self.settings.btClose],
                function(index, val) {

                    var el = $(val);

                    el.on('click', function(event) {

                        event.preventDefault();

                        if (el.hasClass('animating')) {
                            return;
                        };

                        if (el.hasClass('canClose')) {

                            self.settings.btOpen.removeClass('canClose');
                            self.settings.btClose.removeClass('canClose');

                            self.settings.btOpen.addClass('animating');
                            self.settings.btClose.addClass('animating');

                            self.animations("close");
                        };
                    });
                });

            break;
        case "scroll":

            this.settings.btDown
                .hover(function() {
                    if($(this).hasClass('null')){return;}
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 0
                    })
                }, function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: -10
                    })
                });

            this.settings.btDown
                .on('click', function(event) {

                    event.preventDefault();

                    // Si es el último item ya no hace scroll
                    if (self.settings.pos == self.settings.list.length - 1 || $(this).hasClass('moving') == true) {
                        return;
                    };

                    self.animations("scroll-down");
                    self.settings.btUp.removeClass('null');

                    if (self.settings.pos == self.settings.list.length - 1) {

                        self.settings.btDown.addClass('null');
                    } else {
                        self.settings.btDown.removeClass('null');
                    };
                });


            this.settings.btUp
                .hover(function() {
                    if($(this).hasClass('null')){return;}
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 0
                    })
                }, function() {
                    TweenLite.to($(this).find("span"), 0.15, {
                        top: 10
                    })
                });

            this.settings.btUp
                .on('click', function(event) {

                    event.preventDefault();

                    // Si es el último item ya no hace scroll
                    if (self.settings.pos == 0 || $(this).hasClass('moving') == true) {
                        return;
                    };

                    self.animations("scroll-up");
                    self.settings.btDown.removeClass('null');

                    if (self.settings.pos == 0) {

                        self.settings.btUp.addClass('null');
                    } else {
                        self.settings.btUp.removeClass('null');
                    };
                });
            break;
    };
};

List.prototype.animations = function(action) {

    var self = this;

    var setOpacity = function(val) {

        var setAutoAlpha = 1;
        switch (val) {
            case "-":
                $.each(self.settings.list, function(index, val) {

                    TweenMax.to(self.settings.list.eq(index), .55, {
                        opacity: "+=0.4",
                    });
                });
                // TweenMax.staggerTo(self.settings.list, 0, {
                //     opacity: "+=0.4",
                //     ease: Linear.easeNone,
                // });
                // TweenMax.staggerTo(self.settings.list.eq(self.settings.pos), 0, {
                //     opacity: "1",
                //     ease: Linear.easeNone,
                // });
                break;
            case "+":
                $.each(self.settings.list, function(index, val) {

                    TweenMax.to(self.settings.list.eq(index), .55, {
                        opacity: "-=0.4",
                    });
                });
                // TweenMax.staggerTo(self.settings.list, 1.25, {
                //     opacity: "-=0.4",
                //     ease: Linear.easeNone,
                // });
                // TweenMax.staggerTo(self.settings.list.eq(self.settings.pos), 1.25, {
                //     opacity: "1",
                //     ease: Linear.easeNone,
                // });
                break;
        }
    };
    switch (action) {
        case "open":

            panning.unbind("content");

            // 7
            var showScrollButtons = function() {

                    TweenLite.fromTo(self.settings.btUp, 0.25, {
                        autoAlpha: 1,
                        y: 20,
                        ease: Cubic.easeOut,
                    }, {
                        y: 0,
                    });

                    TweenLite.fromTo(self.settings.btDown, 0.25, {
                        autoAlpha: 1,
                        y: -20,
                        ease: Cubic.easeOut,
                    }, {
                        y: 0,
                    });

                    self.settings.btOpen.addClass('canClose');
                    self.settings.btClose.addClass('canClose');

                    self.settings.btOpen.removeClass('animating');
                    self.settings.btClose.removeClass('animating');
                }
                // 6
            var showList = function() {

                TweenLite.set(self.settings.container, {
                    marginTop: "220px"
                });

                this.delay = 0;
                this.duration = 0.35;
                this.autoAlpha = 1;
                var count = 0;
                var length = self.settings.list.length;
                for (var i = 0; i < length; i++) {
                    var el = self.settings.list[i];
                    TweenLite.set(el, {
                        autoAlpha: this.autoAlpha,
                        delay: this.delay,
                    });
                    TweenLite.fromTo(el, this.duration, {
                        y: 250,
                    }, {
                        y: 0,
                        delay: this.delay,
                        ease: Cubic.easeOut,
                        // onComplete: function() {
                        //     count = count + 1;
                        //     if (count >= length) {
                        //         showScrollButtons();
                        //     };
                        // }
                    });

                    this.autoAlpha = this.autoAlpha - 0.4;
                    this.delay = this.delay + 0.15;
                };
            };

            // 5
            var showBtClose = function() {

                self.settings.btClose.css('display', 'block');
                var arrow = self.settings.btClose.find("span.arrow-content"),
                    text = self.settings.btClose.find("span.text");

                TweenLite.set([arrow, text], {
                    autoAlpha: 0
                });

                TweenLite.fromTo(arrow, 0.15, {
                    x: 50,
                    autoAlpha: 1
                }, {
                    x: 18,
                    ease: Cubic.easeOut,
                    onComplete: function() {

                        TweenLite.to(text, 0.15, {
                            autoAlpha: 1,
                            ease: Cubic.easeOut,
                        });
                    }
                });
            };

            // 4
            var closeContent = function() {
                $.each(self.settings.toHidde, function(index, val) {

                    var el = $(val);

                    el.data("height", el.height())
                });
                TweenLite.to(self.settings.btToHidde, 0.25, {
                    ease: Cubic.easeOut,
                    marginTop: 0,
                });
                TweenLite.to(self.settings.toHidde, 0.25, {
                    ease: Cubic.easeOut,
                    height: 0,
                    onComplete: function() {
                        showList();
                        showScrollButtons();
                        showBtClose();
                    }
                });
                TweenLite.to(self.settings.btOpen, 0.25, {
                    ease: Cubic.easeOut,
                    top: -22,
                });
            };

            // 3
            var blur = function() {

                var img = self.settings.posesImg.eq(poses.settings.btPoseActive).find("img.blur");
                // img.css('display', 'block');
                TweenMax.to(img, .55, {
                    autoAlpha: 1,
                    delay: 0.2,
                    ease: Linear.easeNone,
                    onComplete: closeContent
                });
            };

            // 2
            var hiddeContent = function() {

                TweenLite.to(self.settings.toHidde, 0.25, {
                    autoAlpha: 0,
                    ease: Linear.easeNone,
                    onComplete: function() {
                        blur()
                    },
                });
            };

            // 1
            var scrollWindow = function() {

                TweenMax.to($("#slmf-team"), 0.25, {
                    scrollTo: {
                        y: 0,
                    },
                    ease: Cubic.easeOut,
                    onComplete: hiddeContent,
                });
            };

            scrollWindow();
            break;
        case "close":

            // 6
            var showContent = function() {

                TweenLite.to(self.settings.toHidde, 0.25, {
                    autoAlpha: 1,
                    ease: Cubic.easeOut,
                    onComplete: function() {

                        self.settings.btOpen.addClass('canOpen');
                        self.settings.btClose.removeClass('canClose');

                        self.settings.btOpen.removeClass('animating');
                        self.settings.btClose.removeClass('animating');

                        panning.bind("content");
                    }
                });
            };

            // 5
            var blur = function() {

                var img = self.settings.posesImg.eq(poses.settings.btPoseActive).find("img.blur");


                TweenMax.to(img, .55, {
                    autoAlpha: 0,
                    ease: Linear.easeNone,
                    onComplete: function() {
                        // img.css('display', 'none');
                        showContent();
                    }
                });
            };

            // 4
            var openContent = function() {

                self.settings.btClose.css('display', 'none');
                $.each(self.settings.toHidde, function(index, val) {

                    var el = $(val);

                    TweenLite.to(el, 0.25, {
                        ease: Cubic.easeOut,
                        height: el.data("height"),
                        onComplete: function() {

                            if (index >= self.settings.toHidde.length - 1) {
                                blur();
                            };
                        }
                    });
                });
                TweenLite.to(self.settings.btToHidde, 0.25, {
                    ease: Cubic.easeOut,
                    marginTop: 22,
                });
                TweenLite.to(self.settings.btOpen, 0.25, {
                    ease: Cubic.easeOut,
                    top: 0,
                });
            };

            // 3
            var resetListPosition = function() {
                self.settings.pos = 0;


                TweenLite.set(self.settings.list, {
                    top: 0,
                    y: 0
                });

                TweenLite.set(self.settings.container, {
                    marginTop: "200%"
                });
                TweenLite.set(self.settings.content, {
                    top: 0
                });
                self.settings.btDown.removeClass('null');
                self.settings.btUp.addClass('null');
                hiddeBtClose();
            };

            // 2
            var hiddeBtClose = function() {

                var arrow = self.settings.btClose.find("span.arrow-content"),
                    text = self.settings.btClose.find("span.text");

                TweenLite.to([arrow, text], 0.25, {
                    autoAlpha: 0,
                    ease: Cubic.easeOut,
                    onComplete: openContent,
                });
            };

            // 1
            var hiddeContent = function() {

                hiddeBtClose();
                TweenLite.to([self.settings.btUp, self.settings.btDown, self.settings.list], 0.25, {
                    autoAlpha: 0,
                    ease: Cubic.easeOut,
                    onComplete: resetListPosition
                });
            };

            hiddeContent();

            break;
        case "scroll-up":

            self.settings.btDown.addClass('moving');
            self.settings.btUp.addClass('moving');

            // Puntero de item actual
            self.settings.pos = self.settings.pos - 1;

            // Regresa el último item que se movio a su posicion original
            TweenMax.to(self.settings.list.eq(self.settings.pos), .55, {
                y: 0,
                ease: Cubic.easeOut,
            });

            // Mueve el contenedor hacia abajo la misma distancia que mide el alto
            // del item anterior que se movio
            var top = self.settings.list.eq(self.settings.pos).height();
            TweenMax.to(self.settings.content, .55, {

                top: "+=" + top + "px",
                ease: Cubic.easeInOut,
                onComplete: function() {

                    self.settings.btDown.removeClass('moving');
                    self.settings.btUp.removeClass('moving');
                }
            });

            setOpacity("+");
            break;
        case "scroll-down":

            self.settings.btDown.addClass('moving');
            self.settings.btUp.addClass('moving');

            // Mueve el contenedor hacia arriba la distancia que mide
            // a lo alto el item que se movera
            var top = self.settings.list.eq(self.settings.pos).height();
            TweenLite.to(self.settings.content, .55, {

                top: "-=" + top + "px",
                ease: Cubic.easeInOut,
                onComplete: function() {

                    self.settings.btDown.removeClass('moving');
                    self.settings.btUp.removeClass('moving');
                }
            });

            // Manda el item que se movera hacia arriba
            TweenMax.to(self.settings.list.eq(self.settings.pos), 1.25, {
                y: -400,
                ease: Cubic.easeOut,
            });

            // Puntero de item actual
            self.settings.pos = self.settings.pos + 1;
            setOpacity("-");
            break;
    };
};

Poses = function(params) {

    this.settings = {

        h1: $SlmfTeamFile.find("h1"),
        h2: $SlmfTeamFile.find("h2"),

        posesImg: $Poses.find(".poses-img-content"),
        poses: $SlmfTeamFile.find("#data-poses ul"),
        btPoses: "", //$SlmfTeamFile.find("#data-content-poses a")
        btPoseActive: 0,


    };
    this.onCompleteRender = params.onCompleteRender || function() {};
    this.data = params.data || {};
    this.init();
    this.swaps = 0;
};

Poses.prototype.init = function(data) {

    this.render();
};

Poses.prototype.bind = function(action) {

    var self = this;

    switch (action) {
        case "poses":
            self.swaps++;
            self.settings.btPoses = self.settings.poses.find("a");

            self.settings.poses.find("a").unbind('click');

            self.settings.poses.find("a").on('click', function(e) {

                e.preventDefault();
                if (self.settings.poses.hasClass('animating')) {
                    return;
                };


                self.settings.poses.addClass('animating');
                $SlmfTeamFile.removeClass('panning');

                var el = $(this),
                    li = el.parent(),
                    index = el.data("index"),
                    outImg = self.settings.posesImg.eq(self.settings.btPoseActive).find("img.normal"),
                    inImg = self.settings.posesImg.eq(index).find("img.normal");

                // Switch botón
                TweenMax.set(el, {
                    autoAlpha: 0,
                    delay: 0.25,
                    onComplete: function() {
                        li.html("");

                        li.append('<div class="wrap" style="opacity:0;visibility: hidden;"><a href="#", data-index="' + self.settings.btPoseActive + '"> <img src="' + self.data.poses[self.settings.btPoseActive].imgSrc + '" > <span>' + self.data.poses[self.settings.btPoseActive].title + '</span> </a></div>');
                        TweenMax.set(li.find(".wrap"), {
                            autoAlpha: 1,

                        });
                        // Cambia imágen

                        // console.log(self.settings.btPoseActive, index)
                        var timeout = self.swaps < 2 ? 500 : 50;

                        TweenMax.set(inImg, {
                            autoAlpha: 0.001
                        });
                        TweenMax.set(outImg, {
                            autoAlpha: 0.99
                        });
                        setTimeout(function() {

                            TweenMax.to(inImg, 0.85, {
                                autoAlpha: 1
                            });
                            TweenMax.to(outImg, 0.85, {
                                autoAlpha: 0,
                                onComplete: function() {
                                    li.find("a").unwrap();
                                    self.settings.poses.removeClass('animating');
                                    $SlmfTeamFile.addClass('panning');
                                    self.bind("poses");

                                }
                            });
                        }, timeout);
                        self.settings.btPoseActive = index;
                    }
                })

                TweenMax.to($Window, 0.25, {
                    scrollTo: {
                        y: 0
                    },
                });
            });

            break;
    };
};

Poses.prototype.render = function() {

    var self = this;

    $.each(self.data.poses, function(index, val) {

        // Crea lista de poses
        if (index != 0) {
            self.settings.poses
                .append('<li> <a href="#", data-index="' + index + '"> <img src="' + val.imgSrc + '" ><span>' + val.title + '</span> </a> </li>');
        };
    });
    self.btPoseActive = 0;
    this.onCompleteRender();
};

Poses.prototype.animations = function(params) {

    switch (params.action) {
        case "intro":

            break;
    };
};

Panning = function() {

    this.settings = {
        content: $SlmfTeamFile.find(".poses-img-content"),
    };
};

Panning.prototype.init = function() {
    this.bind("content");
};

Panning.prototype.bind = function(action) {

    var self = this;
    switch (action) {

        case "content":

            // $("body").mousemove(function(e){
            $("#panning-content").mousemove(function(e){
                
                var offsetFromViewport = 0, //490
                    xPos = e.pageY - offsetFromViewport;

                var percent20 = (20 * $("body").height()) / 100,
                    percent60 = (60 * $("body").height()) / 100,
                    xPos = xPos - percent20,
                    scrollPosX = (xPos * 100) / percent60;

                if (scrollPosX > 100) {
                    scrollPosX = 100;
                } else if (scrollPosX < 0) {
                    scrollPosX = 0;
                };

                var maxWidthContent = $SlmfTeamFile.find(".poses-img-content").eq(0).height() - $("body").height(),
                    posLeft = (scrollPosX * maxWidthContent) / 100;

                // console.log(scrollPosX, maxWidthContent, posLeft)
                TweenMax
                    .to(
                        $("#slmf-team"), 0.45, {
                            scrollTo: {
                                y: posLeft,
                            },
                            ease: "easeInOutQuad",
                        });
            });
            break;
    };
};

Panning.prototype.unbind = function(action) {

    switch (action) {
        case "content":

            $("#panning-content")
                .unbind("mousemove");
            break;
    }
};

Measures = function() {

    this.settings = {

        points: $Poses.find(".pt"),
        li: $Data.find("ul.medidas-2 li"),
        distance: 119,
    };
};

Measures.prototype.init = function() {

    this.settings.distance = this.settings.li.eq(0).height();
    this.bind("waypoints");
};

Measures.prototype.bind = function(action) {

    var self = this;
    switch (action) {
        case "waypoints":

            // console.log("----------------------")
            // console.log("waypoints init")
            self.settings.points
                .waypoint(function() {
                    // console.log("point")
                    var pos = $(this).data("p");
                    pos = pos * self.settings.distance * -1

                    self.animations({
                        action: "move",
                        y: pos
                    });
                },{context: "#slmf-team"});
            break;
    };
};

Measures.prototype.animations = function(params) {

    var self = this;
    switch (params.action) {
        case "move":
            TweenMax.allTo(self.settings.li, .25, {
                y: params.y,
                ease: Linear.easeNone
            });
            break;
    };
};

SlmfTeamFile = {

    init: function(data) {

        this.cachedElements();
        // console.log(BrowserDetect);
        panning = new Panning();
        measures = new Measures();
        awards = new List();
        awards.settings = {
            btOpen: $Data.find("#bt-premios"),
            btToHidde: $Data.find("#bt-entrevista"),
            btClose: $Data.find("#bt-close-premios"),
            toHidde: $SlmfTeamFile.find("#bt-entrevista, #data-medidas, #data-poses, #data-content-gallery, #bt-slmf-team, .medidas-2"),
            posesImg: $Poses.find(".poses-img-content"),
            list: $Poses.find("#list-awards li"),
            container: $Poses.find("#list-awards"),
            content: $Poses.find("#list-awards .content"),
            btUp: $Poses.find("#bt-awards-up"),
            btDown: $Poses.find("#bt-awards-down"),
            countList: 0,
            pos: 0
        };
        enterview = new List();
        enterview.settings = {
            btOpen: $Data.find("#bt-entrevista"),
            btToHidde: $Data.find("#bt-premios"),
            btClose: $Data.find("#bt-close-entrevista"),
            toHidde: $SlmfTeamFile.find("#bt-premios, #data-medidas, #data-poses, #data-content-gallery, #bt-slmf-team, .medidas-2"),
            posesImg: $Poses.find(".poses-img-content"),
            list: $Poses.find("#list-enterview li"),
            container: $Poses.find("#list-enterview"),
            content: $Poses.find("#list-enterview .content"),
            btUp: $Poses.find("#bt-enterview-up"),
            btDown: $Poses.find("#bt-enterview-down"),
            countList: 0,
            pos: 0
        };
        intro = new Intro({});
        intro.onComplete = function() {

            // binds
            $.waypoints('refresh');
            panning.init();
            measures.init();
            poses.bind("poses");
            awards.init();
            enterview.init();
            instagramFile = new InstagramFile({
                container: $("#data-content-gallery .right-gallery ul"),
                count: 5,
                tag: data.tagInstagram,
                userId: data.idInstagram,
                numCharacters: 24,
                monthNames: ["ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE"],
                token: "12464375.dd88a03.260038e5854b493f8f4024fc50dc873d",
                filter: "user",
                onComplete: function() {
                    gallery = new Gallery();
                }
            });
        };
        _onLoadImages(data.images, function() {
            poses = new Poses({
                data: data,
                onCompleteRender: function() {
                    $SlmfTeamFile.removeLoader({
                        onComplete: function() {
                            $(".poses-img-content").css("width", $Window.width() - 95);
                            intro.init({});
                        }
                    });
                }
            });
        });
        //resize background fix
        $Window.resize(function() {
            $(".poses-img-content").css("width", $Window.width() - 95);
        });
    },
    cachedElements: function() {

        $Window = $(window);
        $SlmfTeamFile = $("#slmf-team");
        $Data = $SlmfTeamFile.find("#data");
        $Poses = $SlmfTeamFile.find("#poses-img");
        $Panning = $SlmfTeamFile.find("#panning");
        $Gallery = $SlmfTeamFile.find("#data-content-gallery");
    },
};